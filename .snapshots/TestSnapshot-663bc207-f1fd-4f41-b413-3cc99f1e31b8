(urlscanio.ScanResult) {
  raw: ([]uint8) <nil>,
  Data: (struct { Requests []urlscanio.RequestResponse "json:\"requests\""; Cookies urlscanio.NullableSlice[phish.report/urlscanio-go.Cookie] "json:\"cookies\""; Console []urlscanio.ConsoleLog "json:\"console\""; Links []struct { Href string "json:\"href\""; Text string "json:\"text\"" } "json:\"links\""; Timing struct { BeginNavigation time.Time "json:\"beginNavigation\""; FrameStartedLoading time.Time "json:\"frameStartedLoading\""; FrameNavigated time.Time "json:\"frameNavigated\""; DomContentEventFired time.Time "json:\"domContentEventFired\""; FrameStoppedLoading time.Time "json:\"frameStoppedLoading\"" } "json:\"timing\""; Globals []struct { Prop string "json:\"prop\""; Type string "json:\"type\"" } "json:\"globals\"" }) {
    Requests: ([]urlscanio.RequestResponse) (len=25) {
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=31) "https://savee.it/www.www.intern",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=31) "https://savee.it/www.www.intern",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=25) "Upgrade-Insecure-Requests": (string) (len=1) "1",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=8) "VeryHigh",
            ReferrerPolicy: (string) (len=31) "strict-origin-when-cross-origin",
            IsSameSite: (bool) true,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851001888365e+06,
          WallTime: (float64) 1.731061468354402e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=5) "other",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) true,
          Type: (string) (len=8) "Document",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) true,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) (len=32) "https://savee.it/www.www.intern/",
            Status: (int) 308,
            StatusText: (string) "",
            Headers: (map[string]string) (len=8) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=12) "content-type": (string) (len=25) "text/plain; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:28 GMT",
              (string) (len=8) "location": (string) (len=15) "/www.www.intern",
              (string) (len=7) "refresh": (string) (len=21) "0;url=/www.www.intern",
              (string) (len=15) "x-frame-options": (string) (len=10) "SAMEORIGIN"
            },
            MimeType: (string) (len=10) "text/plain",
            RemoteIPAddress: (string) (len=14) "104.200.31.245",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 206,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851000876505e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) 0.186,
              DnsEnd: (float64) 52.856,
              ConnectStart: (float64) 52.933,
              ConnectEnd: (float64) 794.929,
              SslStart: (float64) 59.492,
              SslEnd: (float64) 794.92,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 831.673,
              SendEnd: (float64) 832.814,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 988.927,
              ReceiveHeadersEnd: (float64) 991.817
            },
            ResponseTime: (float64) 1.731061468331405e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_128_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=8) "savee.it",
              SanList: ([]string) (len=1) {
                (string) (len=8) "savee.it"
              },
              Issuer: (string) (len=2) "E6",
              ValidFrom: (int) 1728479308,
              ValidTo: (int) 1736255307,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=23) "DigiCert Nessie2025 Log",
                  (string) (len=5) "logId": (string) (len=64) "E6D2316340778CC1104106D771B9CEC1D240F6968486FBBA87321DFD1E378E50",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=144) "30460221009954F5C1470E07EAD353D06CB673A44C670B9AB4CA47B7F1078CD2837D2A86C3022100ACFF671BDDF55FE54F37A56F03D5E6C2CB69294C479C6940843459B75E3A9D22",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818608e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "E092B3FC0C1DC8E768361FDE61B9964D0A5278198A72D672C4B04DA56D6F5404",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "3045022100C8379C810B35866B869DB833814EF59B6F6FB4F90D3DFCDDB5C805BA83023FA10220041463F5EA701CEB49503EDD9F1EFB675332635E8A5292A780B37CF9B1EFC20E",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818634e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 1027,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 4525,
          DataLength: (int) 12219,
          RequestId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          Type: (string) (len=8) "Document",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=31) "https://savee.it/www.www.intern",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=10) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=55) "private, no-cache, no-store, max-age=0, must-revalidate",
              (string) (len=16) "content-encoding": (string) (len=4) "gzip",
              (string) (len=12) "content-type": (string) (len=24) "text/html; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:28 GMT",
              (string) (len=4) "etag": (string) (len=16) "\"10qyvpfvf3w9ff\"",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding",
              (string) (len=15) "x-frame-options": (string) (len=10) "SAMEORIGIN"
            },
            MimeType: (string) (len=9) "text/html",
            RemoteIPAddress: (string) (len=14) "104.200.31.245",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 4516,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851001890406e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 1.293,
              SendEnd: (float64) 1.793,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 155.575,
              ReceiveHeadersEnd: (float64) 155.842
            },
            ResponseTime: (float64) 1.731061468511969e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=14) "mainJobWonRace",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_128_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=8) "savee.it",
              SanList: ([]string) (len=1) {
                (string) (len=8) "savee.it"
              },
              Issuer: (string) (len=2) "E6",
              ValidFrom: (int) 1728479308,
              ValidTo: (int) 1736255307,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=23) "DigiCert Nessie2025 Log",
                  (string) (len=5) "logId": (string) (len=64) "E6D2316340778CC1104106D771B9CEC1D240F6968486FBBA87321DFD1E378E50",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=144) "30460221009954F5C1470E07EAD353D06CB673A44C670B9AB4CA47B7F1078CD2837D2A86C3022100ACFF671BDDF55FE54F37A56F03D5E6C2CB69294C479C6940843459B75E3A9D22",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818608e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "E092B3FC0C1DC8E768361FDE61B9964D0A5278198A72D672C4B04DA56D6F5404",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "3045022100C8379C810B35866B869DB833814EF59B6F6FB4F90D3DFCDDB5C805BA83023FA10220041463F5EA701CEB49503EDD9F1EFB675332635E8A5292A780B37CF9B1EFC20E",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818634e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 1027,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) (len=1) {
              (struct { Name string "json:\"name\""; Value string "json:\"value\"" }) {
                Name: (string) (len=15) "X-Frame-Options",
                Value: (string) (len=10) "SAMEORIGIN"
              }
            }
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "4a36d537a3c4e9df901c13a333330a0453614a0f5826cab416b1d3c62e4c87a7",
          Size: (int) 12219,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Asn: (string) (len=5) "63949",
            Country: (string) (len=2) "SG",
            Registrar: (string) (len=5) "apnic",
            Date: (string) (len=10) "2015-02-16",
            Description: (string) (len=43) "AKAMAI-LINODE-AP Akamai Connected Cloud, SG",
            Route: (string) (len=15) "104.200.28.0/22",
            Name: (string) (len=39) "AKAMAI-LINODE-AP Akamai Connected Cloud"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "US",
            Region: (string) (len=2) "NJ",
            Timezone: (string) (len=16) "America/New_York",
            City: (string) (len=12) "Cedar Knolls",
            Ll: ([]float64) (len=2) {
              (float64) 40.8229,
              (float64) -74.4592
            },
            CountryName: (string) (len=13) "United States",
            Metro: (int) 501
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Ptr: (string) (len=8) "savee.it"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) "",
          Host: (string) "",
          Type: (string) ""
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=7) "83855.2",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=31) "https://savee.it/www.www.intern",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=62) "https://st.savee-cdn.com/_next/static/css/443b5a384b61da91.css",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=8) "VeryHigh",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851002100603e+06,
          WallTime: (float64) 1.731061468566611e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "parser",
            Url: (string) (len=31) "https://savee.it/www.www.intern",
            LineNumber: (int) 0,
            ColumnNumber: (int) 5059,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=10) "Stylesheet",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 16294,
          DataLength: (int) 94075,
          RequestId: (string) (len=7) "83855.2",
          Type: (string) (len=10) "Stylesheet",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=62) "https://st.savee-cdn.com/_next/static/css/443b5a384b61da91.css",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=25) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=28) "access-control-allow-headers": (string) (len=115) "Server, x-goog-meta-frames, Content-Length, Content-Type, Range, X-Requested-With, If-Modified-Since, If-None-Match",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=29) "access-control-expose-headers": (string) (len=115) "Server, x-goog-meta-frames, Content-Length, Content-Type, Range, X-Requested-With, If-Modified-Since, If-None-Match",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "11/04/2024 16:32:31",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1080",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.06",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "77fc76331eca836ed9c71f0b09fe7957",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=23) "text/css; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:30 GMT",
              (string) (len=4) "etag": (string) (len=18) "\"d5djdu9gr05y20l7\"",
              (string) (len=13) "last-modified": (string) (len=29) "Mon, 04 Nov 2024 16:31:47 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding"
            },
            MimeType: (string) (len=8) "text/css",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 16294,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851002104247e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) 0.106,
              DnsEnd: (float64) 118.042,
              ConnectStart: (float64) 118.405,
              ConnectEnd: (float64) 1581.168,
              SslStart: (float64) 453.843,
              SslEnd: (float64) 1581.16,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 1708.85,
              SendEnd: (float64) 1771.688,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 1851.169,
              ReceiveHeadersEnd: (float64) 2014.561
            },
            ResponseTime: (float64) 1.731061470421389e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2024h2'",
                  (string) (len=5) "logId": (string) (len=64) "1998107109F0D6522E3080D29E3F64BB836E28CCF90F528EEEDFCE4A3F16B4CA",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=140) "304402202ABB16FB03B29F910CDB5B1563A4B7801231C374D465AEFB4232FA4D48526B7102203E6769B993AD6C99C7B08BBA05C204B6B0664B71E4F0AB97A7EA65847A3A1D57",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940108e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=25) "Let's Encrypt 'Oak2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "A2E30AE445EFBDAD9B7E38ED47677753D7825B8494D72B5E1B2CC4B950A447E7",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "304502205542F2A55DD4228E1220BF00C84A5E8763F8B4D98DBA1E5FBCF284D4FC6B2CD1022100A0C79814AA23FA32A38CDDE7E4E0728C3E1159A9B7B4FD91C2CDEF3F0F3491A8",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940104e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "f6677c53fb885a529bdcd9b2f2bf58a0d1a199d47c514e091ce4577badc236b7",
          Size: (int) 94075,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=31) "https://savee.it/www.www.intern",
          Host: (string) (len=8) "savee.it",
          Type: (string) (len=6) "parser"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=7) "83855.4",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=31) "https://savee.it/www.www.intern",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=72) "https://st.savee-cdn.com/_next/static/chunks/webpack-656e6f1aaef23e6c.js",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=3) "Low",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851002100815e+06,
          WallTime: (float64) 1.731061468566783e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "parser",
            Url: (string) (len=31) "https://savee.it/www.www.intern",
            LineNumber: (int) 0,
            ColumnNumber: (int) 5415,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=6) "Script",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 3903,
          DataLength: (int) 7100,
          RequestId: (string) (len=7) "83855.4",
          Type: (string) (len=6) "Script",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=72) "https://st.savee-cdn.com/_next/static/chunks/webpack-656e6f1aaef23e6c.js",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "11/07/2024 17:51:47",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1080",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.06",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "b1ad845f5dd86a794caa6a9deaeae943",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=30) "text/javascript; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:30 GMT",
              (string) (len=4) "etag": (string) (len=17) "\"d5g4ylaqqetc5h8\"",
              (string) (len=13) "last-modified": (string) (len=29) "Thu, 07 Nov 2024 17:51:36 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding"
            },
            MimeType: (string) (len=15) "text/javascript",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 3903,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851002104659e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 1708.466,
              SendEnd: (float64) 1792.865,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 1850.62,
              ReceiveHeadersEnd: (float64) 2014.66
            },
            ResponseTime: (float64) 1.731061470421262e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2024h2'",
                  (string) (len=5) "logId": (string) (len=64) "1998107109F0D6522E3080D29E3F64BB836E28CCF90F528EEEDFCE4A3F16B4CA",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=140) "304402202ABB16FB03B29F910CDB5B1563A4B7801231C374D465AEFB4232FA4D48526B7102203E6769B993AD6C99C7B08BBA05C204B6B0664B71E4F0AB97A7EA65847A3A1D57",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940108e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=25) "Let's Encrypt 'Oak2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "A2E30AE445EFBDAD9B7E38ED47677753D7825B8494D72B5E1B2CC4B950A447E7",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "304502205542F2A55DD4228E1220BF00C84A5E8763F8B4D98DBA1E5FBCF284D4FC6B2CD1022100A0C79814AA23FA32A38CDDE7E4E0728C3E1159A9B7B4FD91C2CDEF3F0F3491A8",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940104e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "f355326c532427ca204611bfd11ca6ab79694d923502af319f189c321b386307",
          Size: (int) 7100,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=31) "https://savee.it/www.www.intern",
          Host: (string) (len=8) "savee.it",
          Type: (string) (len=6) "parser"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=7) "83855.5",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=31) "https://savee.it/www.www.intern",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=74) "https://st.savee-cdn.com/_next/static/chunks/framework-5ce6754f376fa5c3.js",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=3) "Low",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851002100857e+06,
          WallTime: (float64) 1.731061468566835e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "parser",
            Url: (string) (len=31) "https://savee.it/www.www.intern",
            LineNumber: (int) 0,
            ColumnNumber: (int) 5522,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=6) "Script",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 46250,
          DataLength: (int) 140435,
          RequestId: (string) (len=7) "83855.5",
          Type: (string) (len=6) "Script",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=74) "https://st.savee-cdn.com/_next/static/chunks/framework-5ce6754f376fa5c3.js",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "10/10/2024 21:28:25",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1080",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.04",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "b0306def70c23c21de5e647102a69226",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=30) "text/javascript; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:30 GMT",
              (string) (len=4) "etag": (string) (len=18) "\"d4sft5l0g6ys30cz\"",
              (string) (len=13) "last-modified": (string) (len=29) "Thu, 10 Oct 2024 21:17:43 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding"
            },
            MimeType: (string) (len=15) "text/javascript",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 40770,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851004290214e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 101.578,
              SendEnd: (float64) 258.926,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 255.25,
              ReceiveHeadersEnd: (float64) 281.971
            },
            ResponseTime: (float64) 1.731061471011441e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=14) "mainJobWonRace",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2024h2'",
                  (string) (len=5) "logId": (string) (len=64) "1998107109F0D6522E3080D29E3F64BB836E28CCF90F528EEEDFCE4A3F16B4CA",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=140) "304402202ABB16FB03B29F910CDB5B1563A4B7801231C374D465AEFB4232FA4D48526B7102203E6769B993AD6C99C7B08BBA05C204B6B0664B71E4F0AB97A7EA65847A3A1D57",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940108e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=25) "Let's Encrypt 'Oak2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "A2E30AE445EFBDAD9B7E38ED47677753D7825B8494D72B5E1B2CC4B950A447E7",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "304502205542F2A55DD4228E1220BF00C84A5E8763F8B4D98DBA1E5FBCF284D4FC6B2CD1022100A0C79814AA23FA32A38CDDE7E4E0728C3E1159A9B7B4FD91C2CDEF3F0F3491A8",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940104e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "aa859a23bdf26be92df1d288f4d40194d311b2ae4970e608c2a47b7e48056f14",
          Size: (int) 140435,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=31) "https://savee.it/www.www.intern",
          Host: (string) (len=8) "savee.it",
          Type: (string) (len=6) "parser"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=7) "83855.6",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=31) "https://savee.it/www.www.intern",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=3) "Low",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851002100888e+06,
          WallTime: (float64) 1.731061468566854e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "parser",
            Url: (string) (len=31) "https://savee.it/www.www.intern",
            LineNumber: (int) 0,
            ColumnNumber: (int) 5624,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=6) "Script",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 38069,
          DataLength: (int) 126174,
          RequestId: (string) (len=7) "83855.6",
          Type: (string) (len=6) "Script",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "10/25/2024 22:41:16",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1082",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.05",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "c17af041024f57248e24cd52e6efefe7",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "1",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=30) "text/javascript; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:30 GMT",
              (string) (len=4) "etag": (string) (len=18) "\"d558sh8dvtj92pcu\"",
              (string) (len=13) "last-modified": (string) (len=29) "Fri, 25 Oct 2024 22:32:22 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding"
            },
            MimeType: (string) (len=15) "text/javascript",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 16222,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851004290754e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 101.074,
              SendEnd: (float64) 258.408,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 272.774,
              ReceiveHeadersEnd: (float64) 281.952
            },
            ResponseTime: (float64) 1.731061471029498e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=14) "mainJobWonRace",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2024h2'",
                  (string) (len=5) "logId": (string) (len=64) "1998107109F0D6522E3080D29E3F64BB836E28CCF90F528EEEDFCE4A3F16B4CA",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=140) "304402202ABB16FB03B29F910CDB5B1563A4B7801231C374D465AEFB4232FA4D48526B7102203E6769B993AD6C99C7B08BBA05C204B6B0664B71E4F0AB97A7EA65847A3A1D57",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940108e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=25) "Let's Encrypt 'Oak2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "A2E30AE445EFBDAD9B7E38ED47677753D7825B8494D72B5E1B2CC4B950A447E7",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "304502205542F2A55DD4228E1220BF00C84A5E8763F8B4D98DBA1E5FBCF284D4FC6B2CD1022100A0C79814AA23FA32A38CDDE7E4E0728C3E1159A9B7B4FD91C2CDEF3F0F3491A8",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940104e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "8962e2520ed976af2f6ae3adf5371c8be45ffcc59013efd84ba177a4ed6a233a",
          Size: (int) 126174,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=31) "https://savee.it/www.www.intern",
          Host: (string) (len=8) "savee.it",
          Type: (string) (len=6) "parser"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=7) "83855.7",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=31) "https://savee.it/www.www.intern",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=75) "https://st.savee-cdn.com/_next/static/chunks/pages/_app-1607120d08c80176.js",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=3) "Low",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851002100911e+06,
          WallTime: (float64) 1.731061468566876e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "parser",
            Url: (string) (len=31) "https://savee.it/www.www.intern",
            LineNumber: (int) 0,
            ColumnNumber: (int) 5732,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=6) "Script",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 405093,
          DataLength: (int) 1321553,
          RequestId: (string) (len=7) "83855.7",
          Type: (string) (len=6) "Script",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=75) "https://st.savee-cdn.com/_next/static/chunks/pages/_app-1607120d08c80176.js",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "11/07/2024 17:51:47",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1080",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.06",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "150d350af7d716b73752c57059826e42",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=30) "text/javascript; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:30 GMT",
              (string) (len=4) "etag": (string) (len=18) "\"d5g4ylavhvs0sbpt\"",
              (string) (len=13) "last-modified": (string) (len=29) "Thu, 07 Nov 2024 17:51:36 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding"
            },
            MimeType: (string) (len=15) "text/javascript",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 15008,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851004290882e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 100.982,
              SendEnd: (float64) 258.282,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 272.733,
              ReceiveHeadersEnd: (float64) 282.554
            },
            ResponseTime: (float64) 1.731061471029589e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=14) "mainJobWonRace",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2024h2'",
                  (string) (len=5) "logId": (string) (len=64) "1998107109F0D6522E3080D29E3F64BB836E28CCF90F528EEEDFCE4A3F16B4CA",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=140) "304402202ABB16FB03B29F910CDB5B1563A4B7801231C374D465AEFB4232FA4D48526B7102203E6769B993AD6C99C7B08BBA05C204B6B0664B71E4F0AB97A7EA65847A3A1D57",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940108e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=25) "Let's Encrypt 'Oak2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "A2E30AE445EFBDAD9B7E38ED47677753D7825B8494D72B5E1B2CC4B950A447E7",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "304502205542F2A55DD4228E1220BF00C84A5E8763F8B4D98DBA1E5FBCF284D4FC6B2CD1022100A0C79814AA23FA32A38CDDE7E4E0728C3E1159A9B7B4FD91C2CDEF3F0F3491A8",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940104e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "90e37ea0a1a4fee4ecec9871fe8d997ef83b92e7129fd31d9506593c43b6bd9b",
          Size: (int) 1321459,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=31) "https://savee.it/www.www.intern",
          Host: (string) (len=8) "savee.it",
          Type: (string) (len=6) "parser"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=7) "83855.8",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=31) "https://savee.it/www.www.intern",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=85) "https://st.savee-cdn.com/_next/static/chunks/pages/%5Busername%5D-1783b906860f46ea.js",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=3) "Low",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851002100931e+06,
          WallTime: (float64) 1.731061468566896e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "parser",
            Url: (string) (len=31) "https://savee.it/www.www.intern",
            LineNumber: (int) 0,
            ColumnNumber: (int) 5850,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=6) "Script",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 1377,
          DataLength: (int) 1516,
          RequestId: (string) (len=7) "83855.8",
          Type: (string) (len=6) "Script",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=85) "https://st.savee-cdn.com/_next/static/chunks/pages/%5Busername%5D-1783b906860f46ea.js",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "10/25/2024 22:41:16",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1081",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.05",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "b797535ce3d866fac1f182fbb34f07d1",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=30) "text/javascript; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:30 GMT",
              (string) (len=4) "etag": (string) (len=17) "\"d558sh8g9k0h164\"",
              (string) (len=13) "last-modified": (string) (len=29) "Fri, 25 Oct 2024 22:32:22 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding"
            },
            MimeType: (string) (len=15) "text/javascript",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 515,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851004290971e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 100.923,
              SendEnd: (float64) 258.194,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 272.592,
              ReceiveHeadersEnd: (float64) 281.987
            },
            ResponseTime: (float64) 1.731061471029531e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=14) "mainJobWonRace",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2024h2'",
                  (string) (len=5) "logId": (string) (len=64) "1998107109F0D6522E3080D29E3F64BB836E28CCF90F528EEEDFCE4A3F16B4CA",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=140) "304402202ABB16FB03B29F910CDB5B1563A4B7801231C374D465AEFB4232FA4D48526B7102203E6769B993AD6C99C7B08BBA05C204B6B0664B71E4F0AB97A7EA65847A3A1D57",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940108e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=25) "Let's Encrypt 'Oak2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "A2E30AE445EFBDAD9B7E38ED47677753D7825B8494D72B5E1B2CC4B950A447E7",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "304502205542F2A55DD4228E1220BF00C84A5E8763F8B4D98DBA1E5FBCF284D4FC6B2CD1022100A0C79814AA23FA32A38CDDE7E4E0728C3E1159A9B7B4FD91C2CDEF3F0F3491A8",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940104e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "a222682d9c7fb0a2dc543d2f6972997cf8ae93f3aa33a8d735da363516f65c38",
          Size: (int) 1516,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=31) "https://savee.it/www.www.intern",
          Host: (string) (len=8) "savee.it",
          Type: (string) (len=6) "parser"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=7) "83855.9",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=31) "https://savee.it/www.www.intern",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=77) "https://st.savee-cdn.com/_next/static/xJVVD0KMIekKYp2FCXeAn/_buildManifest.js",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=3) "Low",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851002100948e+06,
          WallTime: (float64) 1.731061468566914e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "parser",
            Url: (string) (len=31) "https://savee.it/www.www.intern",
            LineNumber: (int) 0,
            ColumnNumber: (int) 5960,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=6) "Script",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 4550,
          DataLength: (int) 55740,
          RequestId: (string) (len=7) "83855.9",
          Type: (string) (len=6) "Script",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=77) "https://st.savee-cdn.com/_next/static/xJVVD0KMIekKYp2FCXeAn/_buildManifest.js",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "11/07/2024 17:51:48",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1081",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.06",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "d3d1e29cd1292ff37276168c748aaaf5",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=30) "text/javascript; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:30 GMT",
              (string) (len=4) "etag": (string) (len=18) "\"d5g4ylaxvm9c170c\"",
              (string) (len=13) "last-modified": (string) (len=29) "Thu, 07 Nov 2024 17:51:36 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding"
            },
            MimeType: (string) (len=15) "text/javascript",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 517,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851004291054e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 100.868,
              SendEnd: (float64) 258.113,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 272.407,
              ReceiveHeadersEnd: (float64) 281.386
            },
            ResponseTime: (float64) 1.731061471029441e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=14) "mainJobWonRace",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2024h2'",
                  (string) (len=5) "logId": (string) (len=64) "1998107109F0D6522E3080D29E3F64BB836E28CCF90F528EEEDFCE4A3F16B4CA",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=140) "304402202ABB16FB03B29F910CDB5B1563A4B7801231C374D465AEFB4232FA4D48526B7102203E6769B993AD6C99C7B08BBA05C204B6B0664B71E4F0AB97A7EA65847A3A1D57",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940108e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=25) "Let's Encrypt 'Oak2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "A2E30AE445EFBDAD9B7E38ED47677753D7825B8494D72B5E1B2CC4B950A447E7",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "304502205542F2A55DD4228E1220BF00C84A5E8763F8B4D98DBA1E5FBCF284D4FC6B2CD1022100A0C79814AA23FA32A38CDDE7E4E0728C3E1159A9B7B4FD91C2CDEF3F0F3491A8",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940104e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "865a5c9db46c07ba7a318213200829ee64206fbb595650e25a89bd7f769088fd",
          Size: (int) 55740,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=31) "https://savee.it/www.www.intern",
          Host: (string) (len=8) "savee.it",
          Type: (string) (len=6) "parser"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.10",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=31) "https://savee.it/www.www.intern",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=75) "https://st.savee-cdn.com/_next/static/xJVVD0KMIekKYp2FCXeAn/_ssgManifest.js",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=3) "Low",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.85100210097e+06,
          WallTime: (float64) 1.731061468566936e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "parser",
            Url: (string) (len=31) "https://savee.it/www.www.intern",
            LineNumber: (int) 0,
            ColumnNumber: (int) 6068,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=6) "Script",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 585,
          DataLength: (int) 77,
          RequestId: (string) (len=8) "83855.10",
          Type: (string) (len=6) "Script",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=75) "https://st.savee-cdn.com/_next/static/xJVVD0KMIekKYp2FCXeAn/_ssgManifest.js",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "11/07/2024 17:51:48",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1079",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.06",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "544dbe52bc75b50d3c583713d9893c7b",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=30) "text/javascript; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:30 GMT",
              (string) (len=4) "etag": (string) (len=16) "\"d5g4ylaxvm9c25\"",
              (string) (len=13) "last-modified": (string) (len=29) "Thu, 07 Nov 2024 17:51:36 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding"
            },
            MimeType: (string) (len=15) "text/javascript",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 516,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851004291148e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 100.801,
              SendEnd: (float64) 258.02,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 272.442,
              ReceiveHeadersEnd: (float64) 282.029
            },
            ResponseTime: (float64) 1.731061471029558e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=14) "mainJobWonRace",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2024h2'",
                  (string) (len=5) "logId": (string) (len=64) "1998107109F0D6522E3080D29E3F64BB836E28CCF90F528EEEDFCE4A3F16B4CA",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=140) "304402202ABB16FB03B29F910CDB5B1563A4B7801231C374D465AEFB4232FA4D48526B7102203E6769B993AD6C99C7B08BBA05C204B6B0664B71E4F0AB97A7EA65847A3A1D57",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940108e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=25) "Let's Encrypt 'Oak2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "A2E30AE445EFBDAD9B7E38ED47677753D7825B8494D72B5E1B2CC4B950A447E7",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "304502205542F2A55DD4228E1220BF00C84A5E8763F8B4D98DBA1E5FBCF284D4FC6B2CD1022100A0C79814AA23FA32A38CDDE7E4E0728C3E1159A9B7B4FD91C2CDEF3F0F3491A8",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940104e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "6f5b4aa00d2f8d6aed9935b471806bf7acef464d0c1d390260e5fe27f800c67e",
          Size: (int) 77,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=31) "https://savee.it/www.www.intern",
          Host: (string) (len=8) "savee.it",
          Type: (string) (len=6) "parser"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.28",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=31) "https://savee.it/www.www.intern",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=58) "https://rsms.me/inter/font-files/Inter-Regular.woff2?v=4.0",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=3) {
              (string) (len=6) "Origin": (string) (len=16) "https://savee.it",
              (string) (len=7) "Referer": (string) (len=25) "https://st.savee-cdn.com/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=8) "VeryHigh",
            ReferrerPolicy: (string) (len=31) "strict-origin-when-cross-origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851005002216e+06,
          WallTime: (float64) 1.731061471468199e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "parser",
            Url: (string) (len=62) "https://st.savee-cdn.com/_next/static/css/443b5a384b61da91.css",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=4) "Font",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 109465,
          DataLength: (int) 108488,
          RequestId: (string) (len=8) "83855.28",
          Type: (string) (len=4) "Font",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=58) "https://rsms.me/inter/font-files/Inter-Regular.woff2?v=4.0",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=27) {
              (string) (len=13) "accept-ranges": (string) (len=5) "bytes",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=3) "age": (string) (len=4) "5983",
              (string) (len=7) "alt-svc": (string) (len=19) "h3=\":443\"; ma=86400",
              (string) (len=13) "cache-control": (string) (len=15) "max-age=2678400",
              (string) (len=15) "cf-cache-status": (string) (len=3) "HIT",
              (string) (len=6) "cf-ray": (string) (len=20) "8df4da9c8ffa73bb-MRS",
              (string) (len=14) "content-length": (string) (len=6) "108488",
              (string) (len=12) "content-type": (string) (len=10) "font/woff2",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:32 GMT",
              (string) (len=4) "etag": (string) (len=16) "\"6601abff-1a7c8\"",
              (string) (len=7) "expires": (string) (len=29) "Sun, 03 Nov 2024 10:49:13 GMT",
              (string) (len=13) "last-modified": (string) (len=29) "Mon, 25 Mar 2024 16:53:19 GMT",
              (string) (len=3) "nel": (string) (len=60) "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}",
              (string) (len=9) "report-to": (string) (len=233) "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=r2oQXhsA%2BqaInPViqPU3BA1te06xOjV5NC2rd3xC8NHWXNlVUqUC4Bf0Y3uJYZbp%2Fe2gKEMIZ%2B3hMVKGqq4SmhV7Vd7b6ir6BRMwya%2FddZ2UtdJWJ6DN9EBb\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
              (string) (len=6) "server": (string) (len=10) "cloudflare",
              (string) (len=13) "server-timing": (string) (len=173) "cfL4;desc=\"?proto=TCP&rtt=19370&sent=7&recv=10&lost=0&retrans=0&sent_bytes=3891&recv_bytes=2216&delivery_rate=196201&cwnd=253&unsent_bytes=0&cid=ba1c8eae6415cfdd&ts=264&x=0\"",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding",
              (string) (len=3) "via": (string) (len=11) "1.1 varnish",
              (string) (len=7) "x-cache": (string) (len=3) "HIT",
              (string) (len=12) "x-cache-hits": (string) (len=1) "6",
              (string) (len=19) "x-fastly-request-id": (string) (len=40) "cadf99f82d0c5cd103ba98de6e7628011431f391",
              (string) (len=19) "x-github-request-id": (string) (len=34) "7FA6:0E04:4290897:445313D:67186BC5",
              (string) (len=14) "x-origin-cache": (string) (len=3) "HIT",
              (string) (len=13) "x-proxy-cache": (string) (len=4) "MISS",
              (string) (len=11) "x-served-by": (string) (len=18) "cache-mrs10530-MRS",
              (string) (len=7) "x-timer": (string) (len=26) "S1730496655.016198,VS0,VE1"
            },
            MimeType: (string) (len=10) "font/woff2",
            RemoteIPAddress: (string) (len=14) "104.21.234.234",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 43171,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851005384167e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) 0.136,
              DnsEnd: (float64) 26.614,
              ConnectStart: (float64) 124.497,
              ConnectEnd: (float64) 807.227,
              SslStart: (float64) 589.368,
              SslEnd: (float64) 807.219,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 854.794,
              SendEnd: (float64) 872.759,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 924.81,
              ReceiveHeadersEnd: (float64) 1086.812
            },
            ResponseTime: (float64) 1.73106147277496e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=14) "mainJobWonRace",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=21) "X25519Kyber768Draft00",
              Cipher: (string) (len=11) "AES_128_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=7) "rsms.me",
              SanList: ([]string) (len=2) {
                (string) (len=7) "rsms.me",
                (string) (len=9) "*.rsms.me"
              },
              Issuer: (string) (len=3) "WE1",
              ValidFrom: (int) 1729333411,
              ValidTo: (int) 1737109410,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=24) "Google 'Argon2025h1' log",
                  (string) (len=5) "logId": (string) (len=64) "4E75A3275C9A10C3385B6CD4DF3F52EB1DF0E08E1B8D69C0B1FA64B1629A39DF",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=140) "30440220629A87B072CA49E8A5ACD94E3958489D6023EA5A71CDC0DA206066EFF437605C02203C7097E44B18300A9C0C53C2CCBE6283394E8AE025696DE18747C0F5FB1F8897",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.72933701251e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=23) "DigiCert Nessie2025 Log",
                  (string) (len=5) "logId": (string) (len=64) "E6D2316340778CC1104106D771B9CEC1D240F6968486FBBA87321DFD1E378E50",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=140) "304402206BA49D9DB6FE54ED8C7544A611C9ADF7942B6708FF397D75A5C2855A1682C64F022038581334EE75BEA98844A3184EFA5807C12069314204B67EBB11FD25070216CE",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.72933701353e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 1027,
              EncryptedClientHello: (bool) true
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "b6f9db9e45be20f3c1312c97fbee7ec36b7d8280f8caa4d53c9ba0408cc9997a",
          Size: (int) 144652,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "104.21.234.234",
            Asn: (string) (len=5) "13335",
            Country: (string) (len=2) "US",
            Registrar: (string) (len=4) "arin",
            Date: (string) (len=10) "2010-07-14",
            Description: (string) (len=17) "CLOUDFLARENET, US",
            Route: (string) (len=15) "104.21.224.0/20",
            Name: (string) (len=13) "CLOUDFLARENET"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) "",
            Region: (string) "",
            Timezone: (string) "",
            City: (string) "",
            Ll: ([]float64) <nil>,
            CountryName: (string) "",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) "",
            Ptr: (string) ""
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=62) "https://st.savee-cdn.com/_next/static/css/443b5a384b61da91.css",
          Host: (string) (len=16) "st.savee-cdn.com",
          Type: (string) (len=6) "parser"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.58",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=30) "https://savee.it/wwwwwwintern/",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=72) "https://savee.it/_monitoring/?o=4507387221573632&p=4507387225374720&r=us",
            Method: (string) (len=4) "POST",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=4) "High",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) true,
            HasPostData: (bool) true,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) (len=1) {
              (struct { Bytes string "json:\"bytes\"" }) {
                Bytes: (string) (len=780) "eyJzZW50X2F0IjoiMjAyNC0xMS0wOFQxMDoyNDozNS40MTdaIiwic2RrIjp7Im5hbWUiOiJzZW50cnkuamF2YXNjcmlwdC5uZXh0anMiLCJ2ZXJzaW9uIjoiOC4zMC4wIn0sImRzbiI6Imh0dHBzOi8vNjllZjUxYjE4MDhiYWY1MDgyZDA3NjJmMGNiOGJjZjZAbzQ1MDczODcyMjE1NzM2MzIuaW5nZXN0LnVzLnNlbnRyeS5pby80NTA3Mzg3MjI1Mzc0NzIwIn0KeyJ0eXBlIjoic2Vzc2lvbiJ9Cnsic2lkIjoiNWRjM2QzODU1Mzc1NGE1YjliZDU5NjNkNDFiYzRlMWYiLCJpbml0Ijp0cnVlLCJzdGFydGVkIjoiMjAyNC0xMS0wOFQxMDoyNDozNS40MTdaIiwidGltZXN0YW1wIjoiMjAyNC0xMS0wOFQxMDoyNDozNS40MTdaIiwic3RhdHVzIjoib2siLCJlcnJvcnMiOjAsImF0dHJzIjp7InJlbGVhc2UiOiI4NGI3NGYxNGNhMzcwNzY2MWIwNWQ0YzE3YjY3NTI4YTk0MTg5MDY2IiwiZW52aXJvbm1lbnQiOiJwcm9kdWN0aW9uIiwidXNlcl9hZ2VudCI6Ik1vemlsbGEvNS4wIChYMTE7IExpbnV4IHg4Nl82NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEzMC4wLjAuMCBTYWZhcmkvNTM3LjM2In19"
              }
            },
            PostData: (string) (len=585) "{\"sent_at\":\"2024-11-08T10:24:35.417Z\",\"sdk\":{\"name\":\"sentry.javascript.nextjs\",\"version\":\"8.30.0\"},\"dsn\":\"https://69ef51b1808baf5082d0762f0cb8bcf6@o4507387221573632.ingest.us.sentry.io/4507387225374720\"}\n{\"type\":\"session\"}\n{\"sid\":\"5dc3d38553754a5b9bd5963d41bc4e1f\",\"init\":true,\"started\":\"2024-11-08T10:24:35.417Z\",\"timestamp\":\"2024-11-08T10:24:35.417Z\",\"status\":\"ok\",\"errors\":0,\"attrs\":{\"release\":\"84b74f14ca3707661b05d4c17b67528a94189066\",\"environment\":\"production\",\"user_agent\":\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36\"}}"
          },
          Timestamp: (float64) 7.851009468724e+06,
          WallTime: (float64) 1.731061475934717e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=5) "other",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) true,
          Type: (string) (len=5) "Fetch",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) (len=71) "https://savee.it/_monitoring?o=4507387221573632&p=4507387225374720&r=us",
            Status: (int) 308,
            StatusText: (string) "",
            Headers: (map[string]string) (len=8) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=12) "content-type": (string) (len=25) "text/plain; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:35 GMT",
              (string) (len=8) "location": (string) (len=56) "/_monitoring/?o=4507387221573632&p=4507387225374720&r=us",
              (string) (len=7) "refresh": (string) (len=62) "0;url=/_monitoring/?o=4507387221573632&p=4507387225374720&r=us",
              (string) (len=15) "x-frame-options": (string) (len=10) "SAMEORIGIN"
            },
            MimeType: (string) (len=10) "text/plain",
            RemoteIPAddress: (string) (len=14) "104.200.31.245",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 204,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.85100895616e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 0.373,
              SendEnd: (float64) 0.803,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 393.721,
              ReceiveHeadersEnd: (float64) 512.147
            },
            ResponseTime: (float64) 1.731061475815855e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_128_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=8) "savee.it",
              SanList: ([]string) (len=1) {
                (string) (len=8) "savee.it"
              },
              Issuer: (string) (len=2) "E6",
              ValidFrom: (int) 1728479308,
              ValidTo: (int) 1736255307,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=23) "DigiCert Nessie2025 Log",
                  (string) (len=5) "logId": (string) (len=64) "E6D2316340778CC1104106D771B9CEC1D240F6968486FBBA87321DFD1E378E50",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=144) "30460221009954F5C1470E07EAD353D06CB673A44C670B9AB4CA47B7F1078CD2837D2A86C3022100ACFF671BDDF55FE54F37A56F03D5E6C2CB69294C479C6940843459B75E3A9D22",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818608e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "E092B3FC0C1DC8E768361FDE61B9964D0A5278198A72D672C4B04DA56D6F5404",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "3045022100C8379C810B35866B869DB833814EF59B6F6FB4F90D3DFCDDB5C805BA83023FA10220041463F5EA701CEB49503EDD9F1EFB675332635E8A5292A780B37CF9B1EFC20E",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818634e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 1027,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 158,
          DataLength: (int) 2,
          RequestId: (string) (len=8) "83855.58",
          Type: (string) (len=5) "Fetch",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=72) "https://savee.it/_monitoring/?o=4507387221573632&p=4507387225374720&r=us",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=10) {
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=29) "access-control-expose-headers": (string) (len=47) "x-sentry-error,x-sentry-rate-limits,retry-after",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=14) "content-length": (string) (len=1) "2",
              (string) (len=12) "content-type": (string) (len=16) "application/json",
              (string) (len=28) "cross-origin-resource-policy": (string) (len=12) "cross-origin",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:36 GMT",
              (string) (len=4) "vary": (string) (len=86) "origin, access-control-request-method, access-control-request-headers, Accept-Encoding",
              (string) (len=3) "via": (string) (len=10) "1.1 google",
              (string) (len=15) "x-frame-options": (string) (len=10) "SAMEORIGIN"
            },
            MimeType: (string) (len=16) "application/json",
            RemoteIPAddress: (string) (len=14) "104.200.31.245",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 158,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851009503366e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 11.744,
              SendEnd: (float64) 191.63,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 316.434,
              ReceiveHeadersEnd: (float64) 469.433
            },
            ResponseTime: (float64) 1.731061476285776e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=7) "unknown",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) (len=1) {
              (struct { Name string "json:\"name\""; Value string "json:\"value\"" }) {
                Name: (string) (len=15) "X-Frame-Options",
                Value: (string) (len=10) "SAMEORIGIN"
              }
            }
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a",
          Size: (int) 2,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Asn: (string) (len=5) "63949",
            Country: (string) (len=2) "SG",
            Registrar: (string) (len=5) "apnic",
            Date: (string) (len=10) "2015-02-16",
            Description: (string) (len=43) "AKAMAI-LINODE-AP Akamai Connected Cloud, SG",
            Route: (string) (len=15) "104.200.28.0/22",
            Name: (string) (len=39) "AKAMAI-LINODE-AP Akamai Connected Cloud"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "US",
            Region: (string) (len=2) "NJ",
            Timezone: (string) (len=16) "America/New_York",
            City: (string) (len=12) "Cedar Knolls",
            Ll: ([]float64) (len=2) {
              (float64) 40.8229,
              (float64) -74.4592
            },
            CountryName: (string) (len=13) "United States",
            Metro: (int) 501
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Ptr: (string) (len=8) "savee.it"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) "",
          Host: (string) "",
          Type: (string) ""
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.59",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=31) "https://savee.it/www.www.intern",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=29) "https://savee.it/js/script.js",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=3) "Low",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) true,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851009200925e+06,
          WallTime: (float64) 1.731061475666981e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "script",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) (len=1) {
                (struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) {
                  FunctionName: (string) (len=1) "m",
                  ScriptId: (string) (len=3) "242",
                  Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
                  LineNumber: (int) 0,
                  ColumnNumber: (int) 34772
                }
              }
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=6) "Script",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 1158,
          DataLength: (int) 1407,
          RequestId: (string) (len=8) "83855.59",
          Type: (string) (len=6) "Script",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=29) "https://savee.it/js/script.js",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=24) {
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=11) "application": (string) (len=9) "127.0.0.1",
              (string) (len=13) "cache-control": (string) (len=38) "public, must-revalidate, max-age=86400",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "11/08/2024 08:15:14",
              (string) (len=17) "cdn-edgestorageid": (string) (len=3) "885",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.06",
              (string) (len=12) "cdn-pullzone": (string) (len=6) "682664",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "US",
              (string) (len=13) "cdn-requestid": (string) (len=32) "82945fc5aaf48f7a6dce18a1af0e1c89",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "153cb5b1-399a-48ef-b5bf-098c03770254",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=22) "application/javascript",
              (string) (len=28) "cross-origin-resource-policy": (string) (len=12) "cross-origin",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:35 GMT",
              (string) (len=18) "permissions-policy": (string) (len=18) "interest-cohort=()",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding",
              (string) (len=22) "x-content-type-options": (string) (len=7) "nosniff",
              (string) (len=15) "x-frame-options": (string) (len=10) "SAMEORIGIN"
            },
            MimeType: (string) (len=22) "application/javascript",
            RemoteIPAddress: (string) (len=14) "104.200.31.245",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 1158,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851009210397e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 79.314,
              SendEnd: (float64) 260.714,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 349.73,
              ReceiveHeadersEnd: (float64) 461.299
            },
            ResponseTime: (float64) 1.731061476026115e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_128_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=8) "savee.it",
              SanList: ([]string) (len=1) {
                (string) (len=8) "savee.it"
              },
              Issuer: (string) (len=2) "E6",
              ValidFrom: (int) 1728479308,
              ValidTo: (int) 1736255307,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=23) "DigiCert Nessie2025 Log",
                  (string) (len=5) "logId": (string) (len=64) "E6D2316340778CC1104106D771B9CEC1D240F6968486FBBA87321DFD1E378E50",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=144) "30460221009954F5C1470E07EAD353D06CB673A44C670B9AB4CA47B7F1078CD2837D2A86C3022100ACFF671BDDF55FE54F37A56F03D5E6C2CB69294C479C6940843459B75E3A9D22",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818608e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "E092B3FC0C1DC8E768361FDE61B9964D0A5278198A72D672C4B04DA56D6F5404",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "3045022100C8379C810B35866B869DB833814EF59B6F6FB4F90D3DFCDDB5C805BA83023FA10220041463F5EA701CEB49503EDD9F1EFB675332635E8A5292A780B37CF9B1EFC20E",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818634e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 1027,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) (len=2) {
              (struct { Name string "json:\"name\""; Value string "json:\"value\"" }) {
                Name: (string) (len=22) "X-Content-Type-Options",
                Value: (string) (len=7) "nosniff"
              },
              (struct { Name string "json:\"name\""; Value string "json:\"value\"" }) {
                Name: (string) (len=15) "X-Frame-Options",
                Value: (string) (len=10) "SAMEORIGIN"
              }
            }
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "e3409ac09af396e35fd67c5e024386d36c52138b7541e6a4644c31a94a2d33a4",
          Size: (int) 1407,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Asn: (string) (len=5) "63949",
            Country: (string) (len=2) "SG",
            Registrar: (string) (len=5) "apnic",
            Date: (string) (len=10) "2015-02-16",
            Description: (string) (len=43) "AKAMAI-LINODE-AP Akamai Connected Cloud, SG",
            Route: (string) (len=15) "104.200.28.0/22",
            Name: (string) (len=39) "AKAMAI-LINODE-AP Akamai Connected Cloud"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "US",
            Region: (string) (len=2) "NJ",
            Timezone: (string) (len=16) "America/New_York",
            City: (string) (len=12) "Cedar Knolls",
            Ll: ([]float64) (len=2) {
              (float64) 40.8229,
              (float64) -74.4592
            },
            CountryName: (string) (len=13) "United States",
            Metro: (int) 501
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Ptr: (string) (len=8) "savee.it"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
          Host: (string) (len=16) "st.savee-cdn.com",
          Type: (string) (len=6) "script"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.60",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=30) "https://savee.it/wwwwwwintern/",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=72) "https://savee.it/_monitoring/?o=4507387221573632&p=4507387225374720&r=us",
            Method: (string) (len=4) "POST",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=4) "High",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) true,
            HasPostData: (bool) true,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) (len=1) {
              (struct { Bytes string "json:\"bytes\"" }) {
                Bytes: (string) (len=788) "eyJzZW50X2F0IjoiMjAyNC0xMS0wOFQxMDoyNDozNS42ODdaIiwic2RrIjp7Im5hbWUiOiJzZW50cnkuamF2YXNjcmlwdC5uZXh0anMiLCJ2ZXJzaW9uIjoiOC4zMC4wIn0sImRzbiI6Imh0dHBzOi8vNjllZjUxYjE4MDhiYWY1MDgyZDA3NjJmMGNiOGJjZjZAbzQ1MDczODcyMjE1NzM2MzIuaW5nZXN0LnVzLnNlbnRyeS5pby80NTA3Mzg3MjI1Mzc0NzIwIn0KeyJ0eXBlIjoic2Vzc2lvbiJ9Cnsic2lkIjoiNWRjM2QzODU1Mzc1NGE1YjliZDU5NjNkNDFiYzRlMWYiLCJpbml0IjpmYWxzZSwic3RhcnRlZCI6IjIwMjQtMTEtMDhUMTA6MjQ6MzUuNDE3WiIsInRpbWVzdGFtcCI6IjIwMjQtMTEtMDhUMTA6MjQ6MzUuNjg3WiIsInN0YXR1cyI6ImV4aXRlZCIsImVycm9ycyI6MCwiYXR0cnMiOnsicmVsZWFzZSI6Ijg0Yjc0ZjE0Y2EzNzA3NjYxYjA1ZDRjMTdiNjc1MjhhOTQxODkwNjYiLCJlbnZpcm9ubWVudCI6InByb2R1Y3Rpb24iLCJ1c2VyX2FnZW50IjoiTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMTMwLjAuMC4wIFNhZmFyaS81MzcuMzYifX0="
              }
            },
            PostData: (string) (len=590) "{\"sent_at\":\"2024-11-08T10:24:35.687Z\",\"sdk\":{\"name\":\"sentry.javascript.nextjs\",\"version\":\"8.30.0\"},\"dsn\":\"https://69ef51b1808baf5082d0762f0cb8bcf6@o4507387221573632.ingest.us.sentry.io/4507387225374720\"}\n{\"type\":\"session\"}\n{\"sid\":\"5dc3d38553754a5b9bd5963d41bc4e1f\",\"init\":false,\"started\":\"2024-11-08T10:24:35.417Z\",\"timestamp\":\"2024-11-08T10:24:35.687Z\",\"status\":\"exited\",\"errors\":0,\"attrs\":{\"release\":\"84b74f14ca3707661b05d4c17b67528a94189066\",\"environment\":\"production\",\"user_agent\":\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36\"}}"
          },
          Timestamp: (float64) 7.851009671216e+06,
          WallTime: (float64) 1.731061476137201e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=5) "other",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) true,
          Type: (string) (len=5) "Fetch",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) (len=71) "https://savee.it/_monitoring?o=4507387221573632&p=4507387225374720&r=us",
            Status: (int) 308,
            StatusText: (string) "",
            Headers: (map[string]string) (len=8) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=12) "content-type": (string) (len=25) "text/plain; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:35 GMT",
              (string) (len=8) "location": (string) (len=56) "/_monitoring/?o=4507387221573632&p=4507387225374720&r=us",
              (string) (len=7) "refresh": (string) (len=62) "0;url=/_monitoring/?o=4507387221573632&p=4507387225374720&r=us",
              (string) (len=15) "x-frame-options": (string) (len=10) "SAMEORIGIN"
            },
            MimeType: (string) (len=10) "text/plain",
            RemoteIPAddress: (string) (len=14) "104.200.31.245",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 92,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851009276529e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 74.194,
              SendEnd: (float64) 238.484,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 319.451,
              ReceiveHeadersEnd: (float64) 394.447
            },
            ResponseTime: (float64) 1.731061476061945e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_128_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=8) "savee.it",
              SanList: ([]string) (len=1) {
                (string) (len=8) "savee.it"
              },
              Issuer: (string) (len=2) "E6",
              ValidFrom: (int) 1728479308,
              ValidTo: (int) 1736255307,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=23) "DigiCert Nessie2025 Log",
                  (string) (len=5) "logId": (string) (len=64) "E6D2316340778CC1104106D771B9CEC1D240F6968486FBBA87321DFD1E378E50",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=144) "30460221009954F5C1470E07EAD353D06CB673A44C670B9AB4CA47B7F1078CD2837D2A86C3022100ACFF671BDDF55FE54F37A56F03D5E6C2CB69294C479C6940843459B75E3A9D22",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818608e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "E092B3FC0C1DC8E768361FDE61B9964D0A5278198A72D672C4B04DA56D6F5404",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "3045022100C8379C810B35866B869DB833814EF59B6F6FB4F90D3DFCDDB5C805BA83023FA10220041463F5EA701CEB49503EDD9F1EFB675332635E8A5292A780B37CF9B1EFC20E",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818634e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 1027,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 31,
          DataLength: (int) 2,
          RequestId: (string) (len=8) "83855.60",
          Type: (string) (len=5) "Fetch",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=72) "https://savee.it/_monitoring/?o=4507387221573632&p=4507387225374720&r=us",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=10) {
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=29) "access-control-expose-headers": (string) (len=47) "x-sentry-error,x-sentry-rate-limits,retry-after",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=14) "content-length": (string) (len=1) "2",
              (string) (len=12) "content-type": (string) (len=16) "application/json",
              (string) (len=28) "cross-origin-resource-policy": (string) (len=12) "cross-origin",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:36 GMT",
              (string) (len=4) "vary": (string) (len=86) "origin, access-control-request-method, access-control-request-headers, Accept-Encoding",
              (string) (len=3) "via": (string) (len=10) "1.1 google",
              (string) (len=15) "x-frame-options": (string) (len=10) "SAMEORIGIN"
            },
            MimeType: (string) (len=16) "application/json",
            RemoteIPAddress: (string) (len=14) "104.200.31.245",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 31,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.8510096832e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 12.011,
              SendEnd: (float64) 23.076,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 246.444,
              ReceiveHeadersEnd: (float64) 288.355
            },
            ResponseTime: (float64) 1.731061476395608e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=7) "unknown",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) (len=1) {
              (struct { Name string "json:\"name\""; Value string "json:\"value\"" }) {
                Name: (string) (len=15) "X-Frame-Options",
                Value: (string) (len=10) "SAMEORIGIN"
              }
            }
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a",
          Size: (int) 2,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Asn: (string) (len=5) "63949",
            Country: (string) (len=2) "SG",
            Registrar: (string) (len=5) "apnic",
            Date: (string) (len=10) "2015-02-16",
            Description: (string) (len=43) "AKAMAI-LINODE-AP Akamai Connected Cloud, SG",
            Route: (string) (len=15) "104.200.28.0/22",
            Name: (string) (len=39) "AKAMAI-LINODE-AP Akamai Connected Cloud"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "US",
            Region: (string) (len=2) "NJ",
            Timezone: (string) (len=16) "America/New_York",
            City: (string) (len=12) "Cedar Knolls",
            Ll: ([]float64) (len=2) {
              (float64) 40.8229,
              (float64) -74.4592
            },
            CountryName: (string) (len=13) "United States",
            Metro: (int) 501
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Ptr: (string) (len=8) "savee.it"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) "",
          Host: (string) "",
          Type: (string) ""
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.61",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=30) "https://savee.it/wwwwwwintern/",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=72) "https://savee.it/_monitoring/?o=4507387221573632&p=4507387225374720&r=us",
            Method: (string) (len=4) "POST",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=4) "High",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) true,
            HasPostData: (bool) true,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) (len=1) {
              (struct { Bytes string "json:\"bytes\"" }) {
                Bytes: (string) (len=780) "eyJzZW50X2F0IjoiMjAyNC0xMS0wOFQxMDoyNDozNS42ODdaIiwic2RrIjp7Im5hbWUiOiJzZW50cnkuamF2YXNjcmlwdC5uZXh0anMiLCJ2ZXJzaW9uIjoiOC4zMC4wIn0sImRzbiI6Imh0dHBzOi8vNjllZjUxYjE4MDhiYWY1MDgyZDA3NjJmMGNiOGJjZjZAbzQ1MDczODcyMjE1NzM2MzIuaW5nZXN0LnVzLnNlbnRyeS5pby80NTA3Mzg3MjI1Mzc0NzIwIn0KeyJ0eXBlIjoic2Vzc2lvbiJ9Cnsic2lkIjoiMTk1NjY5Y2RmYTY1NDZiMDhjYTk5MjAwZmIyM2Q0ZmMiLCJpbml0Ijp0cnVlLCJzdGFydGVkIjoiMjAyNC0xMS0wOFQxMDoyNDozNS42ODdaIiwidGltZXN0YW1wIjoiMjAyNC0xMS0wOFQxMDoyNDozNS42ODdaIiwic3RhdHVzIjoib2siLCJlcnJvcnMiOjAsImF0dHJzIjp7InJlbGVhc2UiOiI4NGI3NGYxNGNhMzcwNzY2MWIwNWQ0YzE3YjY3NTI4YTk0MTg5MDY2IiwiZW52aXJvbm1lbnQiOiJwcm9kdWN0aW9uIiwidXNlcl9hZ2VudCI6Ik1vemlsbGEvNS4wIChYMTE7IExpbnV4IHg4Nl82NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEzMC4wLjAuMCBTYWZhcmkvNTM3LjM2In19"
              }
            },
            PostData: (string) (len=585) "{\"sent_at\":\"2024-11-08T10:24:35.687Z\",\"sdk\":{\"name\":\"sentry.javascript.nextjs\",\"version\":\"8.30.0\"},\"dsn\":\"https://69ef51b1808baf5082d0762f0cb8bcf6@o4507387221573632.ingest.us.sentry.io/4507387225374720\"}\n{\"type\":\"session\"}\n{\"sid\":\"195669cdfa6546b08ca99200fb23d4fc\",\"init\":true,\"started\":\"2024-11-08T10:24:35.687Z\",\"timestamp\":\"2024-11-08T10:24:35.687Z\",\"status\":\"ok\",\"errors\":0,\"attrs\":{\"release\":\"84b74f14ca3707661b05d4c17b67528a94189066\",\"environment\":\"production\",\"user_agent\":\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36\"}}"
          },
          Timestamp: (float64) 7.851009672907e+06,
          WallTime: (float64) 1.731061476138883e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=5) "other",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) true,
          Type: (string) (len=5) "Fetch",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) (len=71) "https://savee.it/_monitoring?o=4507387221573632&p=4507387225374720&r=us",
            Status: (int) 308,
            StatusText: (string) "",
            Headers: (map[string]string) (len=8) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=12) "content-type": (string) (len=25) "text/plain; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:35 GMT",
              (string) (len=8) "location": (string) (len=56) "/_monitoring/?o=4507387221573632&p=4507387225374720&r=us",
              (string) (len=7) "refresh": (string) (len=62) "0;url=/_monitoring/?o=4507387221573632&p=4507387225374720&r=us",
              (string) (len=15) "x-frame-options": (string) (len=10) "SAMEORIGIN"
            },
            MimeType: (string) (len=10) "text/plain",
            RemoteIPAddress: (string) (len=14) "104.200.31.245",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 92,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851009276645e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 74.147,
              SendEnd: (float64) 238.365,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 319.232,
              ReceiveHeadersEnd: (float64) 395.747
            },
            ResponseTime: (float64) 1.731061476061853e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_128_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=8) "savee.it",
              SanList: ([]string) (len=1) {
                (string) (len=8) "savee.it"
              },
              Issuer: (string) (len=2) "E6",
              ValidFrom: (int) 1728479308,
              ValidTo: (int) 1736255307,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=23) "DigiCert Nessie2025 Log",
                  (string) (len=5) "logId": (string) (len=64) "E6D2316340778CC1104106D771B9CEC1D240F6968486FBBA87321DFD1E378E50",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=144) "30460221009954F5C1470E07EAD353D06CB673A44C670B9AB4CA47B7F1078CD2837D2A86C3022100ACFF671BDDF55FE54F37A56F03D5E6C2CB69294C479C6940843459B75E3A9D22",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818608e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "E092B3FC0C1DC8E768361FDE61B9964D0A5278198A72D672C4B04DA56D6F5404",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "3045022100C8379C810B35866B869DB833814EF59B6F6FB4F90D3DFCDDB5C805BA83023FA10220041463F5EA701CEB49503EDD9F1EFB675332635E8A5292A780B37CF9B1EFC20E",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818634e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 1027,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 31,
          DataLength: (int) 2,
          RequestId: (string) (len=8) "83855.61",
          Type: (string) (len=5) "Fetch",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=72) "https://savee.it/_monitoring/?o=4507387221573632&p=4507387225374720&r=us",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=10) {
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=29) "access-control-expose-headers": (string) (len=47) "x-sentry-error,x-sentry-rate-limits,retry-after",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=14) "content-length": (string) (len=1) "2",
              (string) (len=12) "content-type": (string) (len=16) "application/json",
              (string) (len=28) "cross-origin-resource-policy": (string) (len=12) "cross-origin",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:36 GMT",
              (string) (len=4) "vary": (string) (len=86) "origin, access-control-request-method, access-control-request-headers, Accept-Encoding",
              (string) (len=3) "via": (string) (len=10) "1.1 google",
              (string) (len=15) "x-frame-options": (string) (len=10) "SAMEORIGIN"
            },
            MimeType: (string) (len=16) "application/json",
            RemoteIPAddress: (string) (len=14) "104.200.31.245",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 31,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851009687286e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 7.983,
              SendEnd: (float64) 18.988,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 242.286,
              ReceiveHeadersEnd: (float64) 246.621
            },
            ResponseTime: (float64) 1.731061476395547e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=7) "unknown",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) (len=1) {
              (struct { Name string "json:\"name\""; Value string "json:\"value\"" }) {
                Name: (string) (len=15) "X-Frame-Options",
                Value: (string) (len=10) "SAMEORIGIN"
              }
            }
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a",
          Size: (int) 2,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Asn: (string) (len=5) "63949",
            Country: (string) (len=2) "SG",
            Registrar: (string) (len=5) "apnic",
            Date: (string) (len=10) "2015-02-16",
            Description: (string) (len=43) "AKAMAI-LINODE-AP Akamai Connected Cloud, SG",
            Route: (string) (len=15) "104.200.28.0/22",
            Name: (string) (len=39) "AKAMAI-LINODE-AP Akamai Connected Cloud"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "US",
            Region: (string) (len=2) "NJ",
            Timezone: (string) (len=16) "America/New_York",
            City: (string) (len=12) "Cedar Knolls",
            Ll: ([]float64) (len=2) {
              (float64) 40.8229,
              (float64) -74.4592
            },
            CountryName: (string) (len=13) "United States",
            Metro: (int) 501
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Ptr: (string) (len=8) "savee.it"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) "",
          Host: (string) "",
          Type: (string) ""
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.62",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=30) "https://savee.it/wwwwwwintern/",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=29) "https://savee.it/api/graphql/",
            Method: (string) (len=4) "POST",
            Headers: (map[string]string) (len=9) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36",
              (string) (len=6) "accept": (string) (len=3) "*/*",
              (string) (len=25) "apollographql-client-name": (string) (len=3) "www",
              (string) (len=10) "auth-token": (string) (len=4) "null",
              (string) (len=7) "baggage": (string) (len=9) "undefined",
              (string) (len=3) "cid": (string) (len=9) "undefined",
              (string) (len=12) "content-type": (string) (len=16) "application/json",
              (string) (len=12) "sentry-trace": (string) (len=51) "21bec5189d72439a9e091b06efcb50eb-8e8f1a2dad544665-0"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=4) "High",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) true,
            HasPostData: (bool) true,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) (len=1) {
              (struct { Bytes string "json:\"bytes\"" }) {
                Bytes: (string) (len=2280) "eyJvcGVyYXRpb25OYW1lIjoiVXNlclF1ZXJ5IiwidmFyaWFibGVzIjp7InVzZXJuYW1lIjoid3d3Lnd3dy5pbnRlcm4ifSwicXVlcnkiOiJmcmFnbWVudCBVc2VyQ29tcGFueUZyYWdtZW50IG9uIENvbXBhbnkge1xuICBfaWRcbiAgbmFtZVxuICB1cmxcbiAgX190eXBlbmFtZVxufVxuXG5mcmFnbWVudCBCb2FyZENvbGxhYm9yYXRvclVzZXJGcmFnbWVudCBvbiBVc2VyIHtcbiAgX2lkXG4gIHVzZXJuYW1lXG4gIG5hbWVcbiAgYXZhdGFyVVJMXG4gIHVybFxuICBpc1Byb1xuICBfX3R5cGVuYW1lXG59XG5cbmZyYWdtZW50IEJvYXJkQ29sbGFib3JhdG9yRnJhZ21lbnQgb24gQm9hcmRDb2xsYWJvcmF0b3Ige1xuICBfaWRcbiAgdXNlciB7XG4gICAgLi4uQm9hcmRDb2xsYWJvcmF0b3JVc2VyRnJhZ21lbnRcbiAgICBfX3R5cGVuYW1lXG4gIH1cbiAgcm9sZVxuICBfX3R5cGVuYW1lXG59XG5cbmZyYWdtZW50IEludml0ZUZyYWdtZW50IG9uIEludml0ZSB7XG4gIF9pZFxuICB1c2VyIHtcbiAgICBfaWRcbiAgICBuYW1lXG4gICAgdXNlcm5hbWVcbiAgICB1cmxcbiAgICBhdmF0YXJVUkxcbiAgICBfX3R5cGVuYW1lXG4gIH1cbiAgZW1haWxcbiAgX190eXBlbmFtZVxufVxuXG5mcmFnbWVudCBCb2FyZEZyYWdtZW50IG9uIEJvYXJkIHtcbiAgX2lkXG4gIG5hbWVcbiAgc2x1Z1xuICB1cmxcbiAgaXNQcml2YXRlXG4gIGl0ZW1zQ291bnRcbiAgbGFzdEl0ZW1BZGRlZE9yZGVyXG4gIHRodW1ibmFpbHMge1xuICAgIF9pZFxuICAgIGltYWdlIHtcbiAgICAgIHRodW1ibmFpbFxuICAgICAgX190eXBlbmFtZVxuICAgIH1cbiAgICBfX3R5cGVuYW1lXG4gIH1cbiAgb2dJbWFnZSB7XG4gICAgd2lkdGhcbiAgICBoZWlnaHRcbiAgICB1cmxcbiAgICBfX3R5cGVuYW1lXG4gIH1cbiAgcm9sZVxuICBjb2xsYWJvcmF0b3JzIHtcbiAgICAuLi5Cb2FyZENvbGxhYm9yYXRvckZyYWdtZW50XG4gICAgX190eXBlbmFtZVxuICB9XG4gIG93bmVyc2hpcFR5cGVcbiAgaW52aXRlcyB7XG4gICAgLi4uSW52aXRlRnJhZ21lbnRcbiAgICBfX3R5cGVuYW1lXG4gIH1cbiAgYWNjZXB0VVJMXG4gIHJlamVjdFVSTFxuICBwdWJsaWNVUkxcbiAgaXNUZWFtRWRpdG9yQW5FZGl0b3JcbiAgX190eXBlbmFtZVxufVxuXG5mcmFnbWVudCBVc2VyRnJhZ21lbnQgb24gVXNlciB7XG4gIF9pZFxuICB1c2VybmFtZVxuICBuYW1lXG4gIHJvbGVcbiAgY29tcGFueSB7XG4gICAgLi4uVXNlckNvbXBhbnlGcmFnbWVudFxuICAgIF9fdHlwZW5hbWVcbiAgfVxuICB3ZWJzaXRlXG4gIGluc3RhZ3JhbVxuICB0d2l0dGVyXG4gIHVybFxuICBhdmF0YXJVUkxcbiAgb2dJbWFnZSB7XG4gICAgd2lkdGhcbiAgICBoZWlnaHRcbiAgICB1cmxcbiAgICBfX3R5cGVuYW1lXG4gIH1cbiAgYm9hcmRzIHtcbiAgICAuLi5Cb2FyZEZyYWdtZW50XG4gICAgX190eXBlbmFtZVxuICB9XG4gIGlzUHJvXG4gIGl0ZW1zQ291bnRcbiAgYm9hcmRzQ291bnRcbiAgZm9sbG93aW5nQ291bnRcbiAgZm9sbG93ZXJzQ291bnRcbiAgY2FuRm9sbG93XG4gIGlzRm9sbG93aW5nXG4gIGlzRm9sbG93aW5nQmFja1xuICBfX3R5cGVuYW1lXG59XG5cbnF1ZXJ5IFVzZXJRdWVyeSgkdXNlcm5hbWU6IE5vbkVtcHR5U3RyaW5nISkge1xuICB1c2VyQnlVc2VybmFtZSh1c2VybmFtZTogJHVzZXJuYW1lKSB7XG4gICAgLi4uVXNlckZyYWdtZW50XG4gICAgX190eXBlbmFtZVxuICB9XG59In0="
              }
            },
            PostData: (string) (len=1709) "{\"operationName\":\"UserQuery\",\"variables\":{\"username\":\"www.www.intern\"},\"query\":\"fragment UserCompanyFragment on Company {\\n  _id\\n  name\\n  url\\n  __typename\\n}\\n\\nfragment BoardCollaboratorUserFragment on User {\\n  _id\\n  username\\n  name\\n  avatarURL\\n  url\\n  isPro\\n  __typename\\n}\\n\\nfragment BoardCollaboratorFragment on BoardCollaborator {\\n  _id\\n  user {\\n    ...BoardCollaboratorUserFragment\\n    __typename\\n  }\\n  role\\n  __typename\\n}\\n\\nfragment InviteFragment on Invite {\\n  _id\\n  user {\\n    _id\\n    name\\n    username\\n    url\\n    avatarURL\\n    __typename\\n  }\\n  email\\n  __typename\\n}\\n\\nfragment BoardFragment on Board {\\n  _id\\n  name\\n  slug\\n  url\\n  isPrivate\\n  itemsCount\\n  lastItemAddedOrder\\n  thumbnails {\\n    _id\\n    image {\\n      thumbnail\\n      __typename\\n    }\\n    __typename\\n  }\\n  ogImage {\\n    width\\n    height\\n    url\\n    __typename\\n  }\\n  role\\n  collaborators {\\n    ...BoardCollaboratorFragment\\n    __typename\\n  }\\n  ownershipType\\n  invites {\\n    ...InviteFragment\\n    __typename\\n  }\\n  acceptURL\\n  rejectURL\\n  publicURL\\n  isTeamEditorAnEditor\\n  __typename\\n}\\n\\nfragment UserFragment on User {\\n  _id\\n  username\\n  name\\n  role\\n  company {\\n    ...UserCompanyFragment\\n    __typename\\n  }\\n  website\\n  instagram\\n  twitter\\n  url\\n  avatarURL\\n  ogImage {\\n    width\\n    height\\n    url\\n    __typename\\n  }\\n  boards {\\n    ...BoardFragment\\n    __typename\\n  }\\n  isPro\\n  itemsCount\\n  boardsCount\\n  followingCount\\n  followersCount\\n  canFollow\\n  isFollowing\\n  isFollowingBack\\n  __typename\\n}\\n\\nquery UserQuery($username: NonEmptyString!) {\\n  userByUsername(username: $username) {\\n    ...UserFragment\\n    __typename\\n  }\\n}\"}"
          },
          Timestamp: (float64) 7.851009224946e+06,
          WallTime: (float64) 1.731061475690935e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "script",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) (len=1) {
                (struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) {
                  FunctionName: (string) "",
                  ScriptId: (string) (len=3) "243",
                  Url: (string) (len=75) "https://st.savee-cdn.com/_next/static/chunks/pages/_app-1607120d08c80176.js",
                  LineNumber: (int) 13,
                  ColumnNumber: (int) 9391
                }
              }
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=5) "Fetch",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 0,
          DataLength: (int) 0,
          RequestId: (string) "",
          Type: (string) "",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) (len=8) "83855.62",
            Timestamp: (float64) 7.851009246694e+06,
            Type: (string) (len=5) "Fetch",
            ErrorText: (string) (len=16) "net::ERR_ABORTED",
            Canceled: (bool) true
          },
          HasExtraInfo: (bool) false,
          Hash: (string) "",
          Size: (int) 0,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) "",
            Asn: (string) "",
            Country: (string) "",
            Registrar: (string) "",
            Date: (string) "",
            Description: (string) "",
            Route: (string) "",
            Name: (string) ""
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) "",
            Region: (string) "",
            Timezone: (string) "",
            City: (string) "",
            Ll: ([]float64) <nil>,
            CountryName: (string) "",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) "",
            Ptr: (string) ""
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=75) "https://st.savee-cdn.com/_next/static/chunks/pages/_app-1607120d08c80176.js",
          Host: (string) (len=16) "st.savee-cdn.com",
          Type: (string) (len=6) "script"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.63",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=30) "https://savee.it/wwwwwwintern/",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=29) "https://savee.it/api/graphql/",
            Method: (string) (len=4) "POST",
            Headers: (map[string]string) (len=9) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36",
              (string) (len=6) "accept": (string) (len=3) "*/*",
              (string) (len=25) "apollographql-client-name": (string) (len=3) "www",
              (string) (len=10) "auth-token": (string) (len=4) "null",
              (string) (len=7) "baggage": (string) (len=9) "undefined",
              (string) (len=3) "cid": (string) (len=9) "undefined",
              (string) (len=12) "content-type": (string) (len=16) "application/json",
              (string) (len=12) "sentry-trace": (string) (len=51) "21bec5189d72439a9e091b06efcb50eb-bb0262e5423ea3c2-0"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=4) "High",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) true,
            HasPostData: (bool) true,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) (len=1) {
              (struct { Bytes string "json:\"bytes\"" }) {
                Bytes: (string) (len=2276) "eyJvcGVyYXRpb25OYW1lIjoiVXNlclF1ZXJ5IiwidmFyaWFibGVzIjp7InVzZXJuYW1lIjoid3d3d3d3aW50ZXJuIn0sInF1ZXJ5IjoiZnJhZ21lbnQgVXNlckNvbXBhbnlGcmFnbWVudCBvbiBDb21wYW55IHtcbiAgX2lkXG4gIG5hbWVcbiAgdXJsXG4gIF9fdHlwZW5hbWVcbn1cblxuZnJhZ21lbnQgQm9hcmRDb2xsYWJvcmF0b3JVc2VyRnJhZ21lbnQgb24gVXNlciB7XG4gIF9pZFxuICB1c2VybmFtZVxuICBuYW1lXG4gIGF2YXRhclVSTFxuICB1cmxcbiAgaXNQcm9cbiAgX190eXBlbmFtZVxufVxuXG5mcmFnbWVudCBCb2FyZENvbGxhYm9yYXRvckZyYWdtZW50IG9uIEJvYXJkQ29sbGFib3JhdG9yIHtcbiAgX2lkXG4gIHVzZXIge1xuICAgIC4uLkJvYXJkQ29sbGFib3JhdG9yVXNlckZyYWdtZW50XG4gICAgX190eXBlbmFtZVxuICB9XG4gIHJvbGVcbiAgX190eXBlbmFtZVxufVxuXG5mcmFnbWVudCBJbnZpdGVGcmFnbWVudCBvbiBJbnZpdGUge1xuICBfaWRcbiAgdXNlciB7XG4gICAgX2lkXG4gICAgbmFtZVxuICAgIHVzZXJuYW1lXG4gICAgdXJsXG4gICAgYXZhdGFyVVJMXG4gICAgX190eXBlbmFtZVxuICB9XG4gIGVtYWlsXG4gIF9fdHlwZW5hbWVcbn1cblxuZnJhZ21lbnQgQm9hcmRGcmFnbWVudCBvbiBCb2FyZCB7XG4gIF9pZFxuICBuYW1lXG4gIHNsdWdcbiAgdXJsXG4gIGlzUHJpdmF0ZVxuICBpdGVtc0NvdW50XG4gIGxhc3RJdGVtQWRkZWRPcmRlclxuICB0aHVtYm5haWxzIHtcbiAgICBfaWRcbiAgICBpbWFnZSB7XG4gICAgICB0aHVtYm5haWxcbiAgICAgIF9fdHlwZW5hbWVcbiAgICB9XG4gICAgX190eXBlbmFtZVxuICB9XG4gIG9nSW1hZ2Uge1xuICAgIHdpZHRoXG4gICAgaGVpZ2h0XG4gICAgdXJsXG4gICAgX190eXBlbmFtZVxuICB9XG4gIHJvbGVcbiAgY29sbGFib3JhdG9ycyB7XG4gICAgLi4uQm9hcmRDb2xsYWJvcmF0b3JGcmFnbWVudFxuICAgIF9fdHlwZW5hbWVcbiAgfVxuICBvd25lcnNoaXBUeXBlXG4gIGludml0ZXMge1xuICAgIC4uLkludml0ZUZyYWdtZW50XG4gICAgX190eXBlbmFtZVxuICB9XG4gIGFjY2VwdFVSTFxuICByZWplY3RVUkxcbiAgcHVibGljVVJMXG4gIGlzVGVhbUVkaXRvckFuRWRpdG9yXG4gIF9fdHlwZW5hbWVcbn1cblxuZnJhZ21lbnQgVXNlckZyYWdtZW50IG9uIFVzZXIge1xuICBfaWRcbiAgdXNlcm5hbWVcbiAgbmFtZVxuICByb2xlXG4gIGNvbXBhbnkge1xuICAgIC4uLlVzZXJDb21wYW55RnJhZ21lbnRcbiAgICBfX3R5cGVuYW1lXG4gIH1cbiAgd2Vic2l0ZVxuICBpbnN0YWdyYW1cbiAgdHdpdHRlclxuICB1cmxcbiAgYXZhdGFyVVJMXG4gIG9nSW1hZ2Uge1xuICAgIHdpZHRoXG4gICAgaGVpZ2h0XG4gICAgdXJsXG4gICAgX190eXBlbmFtZVxuICB9XG4gIGJvYXJkcyB7XG4gICAgLi4uQm9hcmRGcmFnbWVudFxuICAgIF9fdHlwZW5hbWVcbiAgfVxuICBpc1Byb1xuICBpdGVtc0NvdW50XG4gIGJvYXJkc0NvdW50XG4gIGZvbGxvd2luZ0NvdW50XG4gIGZvbGxvd2Vyc0NvdW50XG4gIGNhbkZvbGxvd1xuICBpc0ZvbGxvd2luZ1xuICBpc0ZvbGxvd2luZ0JhY2tcbiAgX190eXBlbmFtZVxufVxuXG5xdWVyeSBVc2VyUXVlcnkoJHVzZXJuYW1lOiBOb25FbXB0eVN0cmluZyEpIHtcbiAgdXNlckJ5VXNlcm5hbWUodXNlcm5hbWU6ICR1c2VybmFtZSkge1xuICAgIC4uLlVzZXJGcmFnbWVudFxuICAgIF9fdHlwZW5hbWVcbiAgfVxufSJ9"
              }
            },
            PostData: (string) (len=1707) "{\"operationName\":\"UserQuery\",\"variables\":{\"username\":\"wwwwwwintern\"},\"query\":\"fragment UserCompanyFragment on Company {\\n  _id\\n  name\\n  url\\n  __typename\\n}\\n\\nfragment BoardCollaboratorUserFragment on User {\\n  _id\\n  username\\n  name\\n  avatarURL\\n  url\\n  isPro\\n  __typename\\n}\\n\\nfragment BoardCollaboratorFragment on BoardCollaborator {\\n  _id\\n  user {\\n    ...BoardCollaboratorUserFragment\\n    __typename\\n  }\\n  role\\n  __typename\\n}\\n\\nfragment InviteFragment on Invite {\\n  _id\\n  user {\\n    _id\\n    name\\n    username\\n    url\\n    avatarURL\\n    __typename\\n  }\\n  email\\n  __typename\\n}\\n\\nfragment BoardFragment on Board {\\n  _id\\n  name\\n  slug\\n  url\\n  isPrivate\\n  itemsCount\\n  lastItemAddedOrder\\n  thumbnails {\\n    _id\\n    image {\\n      thumbnail\\n      __typename\\n    }\\n    __typename\\n  }\\n  ogImage {\\n    width\\n    height\\n    url\\n    __typename\\n  }\\n  role\\n  collaborators {\\n    ...BoardCollaboratorFragment\\n    __typename\\n  }\\n  ownershipType\\n  invites {\\n    ...InviteFragment\\n    __typename\\n  }\\n  acceptURL\\n  rejectURL\\n  publicURL\\n  isTeamEditorAnEditor\\n  __typename\\n}\\n\\nfragment UserFragment on User {\\n  _id\\n  username\\n  name\\n  role\\n  company {\\n    ...UserCompanyFragment\\n    __typename\\n  }\\n  website\\n  instagram\\n  twitter\\n  url\\n  avatarURL\\n  ogImage {\\n    width\\n    height\\n    url\\n    __typename\\n  }\\n  boards {\\n    ...BoardFragment\\n    __typename\\n  }\\n  isPro\\n  itemsCount\\n  boardsCount\\n  followingCount\\n  followersCount\\n  canFollow\\n  isFollowing\\n  isFollowingBack\\n  __typename\\n}\\n\\nquery UserQuery($username: NonEmptyString!) {\\n  userByUsername(username: $username) {\\n    ...UserFragment\\n    __typename\\n  }\\n}\"}"
          },
          Timestamp: (float64) 7.85100924388e+06,
          WallTime: (float64) 1.73106147570987e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "script",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) (len=1) {
                (struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) {
                  FunctionName: (string) "",
                  ScriptId: (string) (len=3) "243",
                  Url: (string) (len=75) "https://st.savee-cdn.com/_next/static/chunks/pages/_app-1607120d08c80176.js",
                  LineNumber: (int) 13,
                  ColumnNumber: (int) 9391
                }
              }
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=5) "Fetch",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 248,
          DataLength: (int) 152,
          RequestId: (string) (len=8) "83855.63",
          Type: (string) (len=5) "Fetch",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=29) "https://savee.it/api/graphql/",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=8) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=16) "https://savee.it",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=14) "content-length": (string) (len=3) "152",
              (string) (len=12) "content-type": (string) (len=16) "application/json",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:36 GMT",
              (string) (len=4) "vary": (string) (len=23) "Origin, Accept-Encoding",
              (string) (len=15) "x-frame-options": (string) (len=10) "SAMEORIGIN"
            },
            MimeType: (string) (len=16) "application/json",
            RemoteIPAddress: (string) (len=14) "104.200.31.245",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 248,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851009276935e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 73.935,
              SendEnd: (float64) 238.077,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 365.69,
              ReceiveHeadersEnd: (float64) 390.847
            },
            ResponseTime: (float64) 1.731061476108607e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_128_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=8) "savee.it",
              SanList: ([]string) (len=1) {
                (string) (len=8) "savee.it"
              },
              Issuer: (string) (len=2) "E6",
              ValidFrom: (int) 1728479308,
              ValidTo: (int) 1736255307,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=23) "DigiCert Nessie2025 Log",
                  (string) (len=5) "logId": (string) (len=64) "E6D2316340778CC1104106D771B9CEC1D240F6968486FBBA87321DFD1E378E50",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=144) "30460221009954F5C1470E07EAD353D06CB673A44C670B9AB4CA47B7F1078CD2837D2A86C3022100ACFF671BDDF55FE54F37A56F03D5E6C2CB69294C479C6940843459B75E3A9D22",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818608e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "E092B3FC0C1DC8E768361FDE61B9964D0A5278198A72D672C4B04DA56D6F5404",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "3045022100C8379C810B35866B869DB833814EF59B6F6FB4F90D3DFCDDB5C805BA83023FA10220041463F5EA701CEB49503EDD9F1EFB675332635E8A5292A780B37CF9B1EFC20E",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818634e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 1027,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) (len=1) {
              (struct { Name string "json:\"name\""; Value string "json:\"value\"" }) {
                Name: (string) (len=15) "X-Frame-Options",
                Value: (string) (len=10) "SAMEORIGIN"
              }
            }
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "56a51cee0e40d339712586d11bce481b7ae6f5499fbbc4af4df4aff61f95df22",
          Size: (int) 152,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Asn: (string) (len=5) "63949",
            Country: (string) (len=2) "SG",
            Registrar: (string) (len=5) "apnic",
            Date: (string) (len=10) "2015-02-16",
            Description: (string) (len=43) "AKAMAI-LINODE-AP Akamai Connected Cloud, SG",
            Route: (string) (len=15) "104.200.28.0/22",
            Name: (string) (len=39) "AKAMAI-LINODE-AP Akamai Connected Cloud"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "US",
            Region: (string) (len=2) "NJ",
            Timezone: (string) (len=16) "America/New_York",
            City: (string) (len=12) "Cedar Knolls",
            Ll: ([]float64) (len=2) {
              (float64) 40.8229,
              (float64) -74.4592
            },
            CountryName: (string) (len=13) "United States",
            Metro: (int) 501
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Ptr: (string) (len=8) "savee.it"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=75) "https://st.savee-cdn.com/_next/static/chunks/pages/_app-1607120d08c80176.js",
          Host: (string) (len=16) "st.savee-cdn.com",
          Type: (string) (len=6) "script"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.64",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=30) "https://savee.it/wwwwwwintern/",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=76) "https://st.savee-cdn.com/_next/static/chunks/pages/index-d847a348a7e2bf8d.js",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=7) "VeryLow",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851009245107e+06,
          WallTime: (float64) 1.731061475711106e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "script",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) (len=1) {
                (struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) {
                  FunctionName: (string) "",
                  ScriptId: (string) (len=3) "242",
                  Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
                  LineNumber: (int) 0,
                  ColumnNumber: (int) 30363
                }
              }
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=5) "Other",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 3815,
          DataLength: (int) 0,
          RequestId: (string) (len=8) "83855.64",
          Type: (string) (len=5) "Other",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=76) "https://st.savee-cdn.com/_next/static/chunks/pages/index-d847a348a7e2bf8d.js",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "10/27/2024 12:56:24",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1082",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.05",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "ed047e15a710abb4dd530214acda4fe9",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=30) "text/javascript; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:35 GMT",
              (string) (len=4) "etag": (string) (len=17) "\"d5594gzbfq5t5vo\"",
              (string) (len=13) "last-modified": (string) (len=29) "Fri, 25 Oct 2024 22:48:02 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding"
            },
            MimeType: (string) (len=15) "text/javascript",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 3815,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851009416824e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 55.129,
              SendEnd: (float64) 94.605,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 101.849,
              ReceiveHeadersEnd: (float64) 255.349
            },
            ResponseTime: (float64) 1.731061475984652e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2024h2'",
                  (string) (len=5) "logId": (string) (len=64) "1998107109F0D6522E3080D29E3F64BB836E28CCF90F528EEEDFCE4A3F16B4CA",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=140) "304402202ABB16FB03B29F910CDB5B1563A4B7801231C374D465AEFB4232FA4D48526B7102203E6769B993AD6C99C7B08BBA05C204B6B0664B71E4F0AB97A7EA65847A3A1D57",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940108e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=25) "Let's Encrypt 'Oak2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "A2E30AE445EFBDAD9B7E38ED47677753D7825B8494D72B5E1B2CC4B950A447E7",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "304502205542F2A55DD4228E1220BF00C84A5E8763F8B4D98DBA1E5FBCF284D4FC6B2CD1022100A0C79814AA23FA32A38CDDE7E4E0728C3E1159A9B7B4FD91C2CDEF3F0F3491A8",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940104e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
          Size: (int) 0,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
          Host: (string) (len=16) "st.savee-cdn.com",
          Type: (string) (len=6) "script"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.65",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=30) "https://savee.it/wwwwwwintern/",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=75) "https://st.savee-cdn.com/_next/static/chunks/pages/join-f5b5e7499f4a6500.js",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=7) "VeryLow",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851009245238e+06,
          WallTime: (float64) 1.731061475711211e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "script",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) (len=1) {
                (struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) {
                  FunctionName: (string) "",
                  ScriptId: (string) (len=3) "242",
                  Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
                  LineNumber: (int) 0,
                  ColumnNumber: (int) 30363
                }
              }
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=5) "Other",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 3874,
          DataLength: (int) 0,
          RequestId: (string) (len=8) "83855.65",
          Type: (string) (len=5) "Other",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=75) "https://st.savee-cdn.com/_next/static/chunks/pages/join-f5b5e7499f4a6500.js",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "11/08/2024 03:14:12",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1081",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.06",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "f775de4a3e4b59a40da376681b496765",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=30) "text/javascript; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:36 GMT",
              (string) (len=4) "etag": (string) (len=17) "\"d5gbysryj0h35u4\"",
              (string) (len=13) "last-modified": (string) (len=29) "Thu, 07 Nov 2024 23:21:00 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding"
            },
            MimeType: (string) (len=15) "text/javascript",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 3874,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851009511214e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 7.567,
              SendEnd: (float64) 101.281,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 101.253,
              ReceiveHeadersEnd: (float64) 160.197
            },
            ResponseTime: (float64) 1.731061476078442e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2024h2'",
                  (string) (len=5) "logId": (string) (len=64) "1998107109F0D6522E3080D29E3F64BB836E28CCF90F528EEEDFCE4A3F16B4CA",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=140) "304402202ABB16FB03B29F910CDB5B1563A4B7801231C374D465AEFB4232FA4D48526B7102203E6769B993AD6C99C7B08BBA05C204B6B0664B71E4F0AB97A7EA65847A3A1D57",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940108e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=25) "Let's Encrypt 'Oak2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "A2E30AE445EFBDAD9B7E38ED47677753D7825B8494D72B5E1B2CC4B950A447E7",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "304502205542F2A55DD4228E1220BF00C84A5E8763F8B4D98DBA1E5FBCF284D4FC6B2CD1022100A0C79814AA23FA32A38CDDE7E4E0728C3E1159A9B7B4FD91C2CDEF3F0F3491A8",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940104e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
          Size: (int) 0,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
          Host: (string) (len=16) "st.savee-cdn.com",
          Type: (string) (len=6) "script"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.66",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=30) "https://savee.it/wwwwwwintern/",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=76) "https://st.savee-cdn.com/_next/static/chunks/pages/login-1fb778be10fdb784.js",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=7) "VeryLow",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851009245316e+06,
          WallTime: (float64) 1.731061475711286e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "script",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) (len=1) {
                (struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) {
                  FunctionName: (string) "",
                  ScriptId: (string) (len=3) "242",
                  Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
                  LineNumber: (int) 0,
                  ColumnNumber: (int) 30363
                }
              }
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=5) "Other",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 5770,
          DataLength: (int) 0,
          RequestId: (string) (len=8) "83855.66",
          Type: (string) (len=5) "Other",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=76) "https://st.savee-cdn.com/_next/static/chunks/pages/login-1fb778be10fdb784.js",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "10/25/2024 22:55:37",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1079",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.05",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "53bd889daefbf5084e9f2f1cebbad927",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=30) "text/javascript; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:36 GMT",
              (string) (len=4) "etag": (string) (len=17) "\"d5594gzbfq5taem\"",
              (string) (len=13) "last-modified": (string) (len=29) "Fri, 25 Oct 2024 22:48:02 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding"
            },
            MimeType: (string) (len=15) "text/javascript",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 5770,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851009511384e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 7.448,
              SendEnd: (float64) 101.054,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 101.002,
              ReceiveHeadersEnd: (float64) 162.618
            },
            ResponseTime: (float64) 1.731061476078366e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2024h2'",
                  (string) (len=5) "logId": (string) (len=64) "1998107109F0D6522E3080D29E3F64BB836E28CCF90F528EEEDFCE4A3F16B4CA",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=140) "304402202ABB16FB03B29F910CDB5B1563A4B7801231C374D465AEFB4232FA4D48526B7102203E6769B993AD6C99C7B08BBA05C204B6B0664B71E4F0AB97A7EA65847A3A1D57",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940108e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=25) "Let's Encrypt 'Oak2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "A2E30AE445EFBDAD9B7E38ED47677753D7825B8494D72B5E1B2CC4B950A447E7",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "304502205542F2A55DD4228E1220BF00C84A5E8763F8B4D98DBA1E5FBCF284D4FC6B2CD1022100A0C79814AA23FA32A38CDDE7E4E0728C3E1159A9B7B4FD91C2CDEF3F0F3491A8",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940104e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
          Size: (int) 0,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
          Host: (string) (len=16) "st.savee-cdn.com",
          Type: (string) (len=6) "script"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.67",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=30) "https://savee.it/wwwwwwintern/",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=51) "https://st.savee-cdn.com/favicons/favicon-32x32.png",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=4) "High",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851009344598e+06,
          WallTime: (float64) 1.731061475810581e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=5) "other",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=5) "Other",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 1890,
          DataLength: (int) 1384,
          RequestId: (string) (len=8) "83855.67",
          Type: (string) (len=5) "Other",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=51) "https://st.savee-cdn.com/favicons/favicon-32x32.png",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=13) "accept-ranges": (string) (len=5) "bytes",
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "10/24/2024 03:56:54",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1079",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.04",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "6350bdfad9c4cbec209e5965409ca322",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=14) "content-length": (string) (len=4) "1384",
              (string) (len=12) "content-type": (string) (len=9) "image/png",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:35 GMT",
              (string) (len=4) "etag": (string) (len=17) "\"d52jmfszrsly12g\"",
              (string) (len=13) "last-modified": (string) (len=29) "Tue, 22 Oct 2024 18:23:41 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082"
            },
            MimeType: (string) (len=9) "image/png",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 1890,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851009350339e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 95.235,
              SendEnd: (float64) 161.087,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 165.336,
              ReceiveHeadersEnd: (float64) 322.751
            },
            ResponseTime: (float64) 1.731061475981654e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2024h2'",
                  (string) (len=5) "logId": (string) (len=64) "1998107109F0D6522E3080D29E3F64BB836E28CCF90F528EEEDFCE4A3F16B4CA",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=140) "304402202ABB16FB03B29F910CDB5B1563A4B7801231C374D465AEFB4232FA4D48526B7102203E6769B993AD6C99C7B08BBA05C204B6B0664B71E4F0AB97A7EA65847A3A1D57",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940108e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=25) "Let's Encrypt 'Oak2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "A2E30AE445EFBDAD9B7E38ED47677753D7825B8494D72B5E1B2CC4B950A447E7",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "304502205542F2A55DD4228E1220BF00C84A5E8763F8B4D98DBA1E5FBCF284D4FC6B2CD1022100A0C79814AA23FA32A38CDDE7E4E0728C3E1159A9B7B4FD91C2CDEF3F0F3491A8",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.727708940104e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "4c9b30200072b8ab6df6334cf553b66bd8c5a3e14152f85651451cc8cb3bd192",
          Size: (int) 1848,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) "",
          Host: (string) "",
          Type: (string) ""
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.68",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=30) "https://savee.it/wwwwwwintern/",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=51) "https://st.savee-cdn.com/favicons/favicon-32x32.png",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=4) "High",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851009643761e+06,
          WallTime: (float64) 1.731061476109746e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=5) "other",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) <nil>
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=5) "Other",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 0,
          DataLength: (int) 1384,
          RequestId: (string) (len=8) "83855.68",
          Type: (string) (len=5) "Other",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=51) "https://st.savee-cdn.com/favicons/favicon-32x32.png",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=13) "accept-ranges": (string) (len=5) "bytes",
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "10/24/2024 03:56:54",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1079",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.04",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "6350bdfad9c4cbec209e5965409ca322",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=14) "content-length": (string) (len=4) "1384",
              (string) (len=12) "content-type": (string) (len=9) "image/png",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:35 GMT",
              (string) (len=4) "etag": (string) (len=17) "\"d52jmfszrsly12g\"",
              (string) (len=13) "last-modified": (string) (len=29) "Tue, 22 Oct 2024 18:23:41 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082"
            },
            MimeType: (string) (len=9) "image/png",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851009666168e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 0.067,
              SendEnd: (float64) 0.067,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 9.135,
              ReceiveHeadersEnd: (float64) 23.285
            },
            ResponseTime: (float64) 1.731061475981654e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) {
              },
              CertificateTransparencyCompliance: (string) (len=7) "unknown",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) false,
          Hash: (string) (len=64) "4c9b30200072b8ab6df6334cf553b66bd8c5a3e14152f85651451cc8cb3bd192",
          Size: (int) 1848,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) "",
          Host: (string) "",
          Type: (string) ""
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.69",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=30) "https://savee.it/wwwwwwintern/",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=33) "https://savee.it/proxy/api/event/",
            Method: (string) (len=4) "POST",
            Headers: (map[string]string) (len=4) {
              (string) (len=12) "Content-Type": (string) (len=10) "text/plain",
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36",
              (string) (len=12) "sentry-trace": (string) (len=51) "21bec5189d72439a9e091b06efcb50eb-b0bf5801f462fe8f-0"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=4) "High",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) true,
            HasPostData: (bool) true,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) (len=1) {
              (struct { Bytes string "json:\"bytes\"" }) {
                Bytes: (string) (len=104) "eyJuIjoicGFnZXZpZXciLCJ1IjoiaHR0cHM6Ly9zYXZlZS5pdC93d3d3d3dpbnRlcm4vIiwiZCI6InNhdmVlLml0IiwiciI6bnVsbH0="
              }
            },
            PostData: (string) (len=77) "{\"n\":\"pageview\",\"u\":\"https://savee.it/wwwwwwintern/\",\"d\":\"savee.it\",\"r\":null}"
          },
          Timestamp: (float64) 7.851009722901e+06,
          WallTime: (float64) 1.731061476188941e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "script",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) (len=1) {
                (struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) {
                  FunctionName: (string) "",
                  ScriptId: (string) (len=3) "243",
                  Url: (string) (len=75) "https://st.savee-cdn.com/_next/static/chunks/pages/_app-1607120d08c80176.js",
                  LineNumber: (int) 13,
                  ColumnNumber: (int) 14520
                }
              }
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=3) "XHR",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 146,
          DataLength: (int) 2,
          RequestId: (string) (len=8) "83855.69",
          Type: (string) (len=3) "XHR",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=33) "https://savee.it/proxy/api/event/",
            Status: (int) 202,
            StatusText: (string) "",
            Headers: (map[string]string) (len=22) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=11) "application": (string) (len=9) "127.0.0.1",
              (string) (len=13) "cache-control": (string) (len=35) "must-revalidate, max-age=0, private",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "11/08/2024 10:24:36",
              (string) (len=17) "cdn-edgestorageid": (string) (len=3) "885",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.06",
              (string) (len=12) "cdn-pullzone": (string) (len=6) "682664",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "US",
              (string) (len=13) "cdn-requestid": (string) (len=32) "61d6f62cd06cca9cfc25915d2cc755e8",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "202",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=7) "cdn-uid": (string) (len=36) "153cb5b1-399a-48ef-b5bf-098c03770254",
              (string) (len=14) "content-length": (string) (len=1) "2",
              (string) (len=12) "content-type": (string) (len=25) "text/plain; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:36 GMT",
              (string) (len=18) "permissions-policy": (string) (len=18) "interest-cohort=()",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding",
              (string) (len=15) "x-frame-options": (string) (len=10) "SAMEORIGIN",
              (string) (len=12) "x-request-id": (string) (len=20) "GAX3Pcw-ikIuwhIwO3kM"
            },
            MimeType: (string) (len=10) "text/plain",
            RemoteIPAddress: (string) (len=14) "104.200.31.245",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 146,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851009734293e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 49.187,
              SendEnd: (float64) 348.186,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 573.993,
              ReceiveHeadersEnd: (float64) 648.453
            },
            ResponseTime: (float64) 1.731061476774269e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_128_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=8) "savee.it",
              SanList: ([]string) (len=1) {
                (string) (len=8) "savee.it"
              },
              Issuer: (string) (len=2) "E6",
              ValidFrom: (int) 1728479308,
              ValidTo: (int) 1736255307,
              SignedCertificateTimestampList: ([]interface {}) (len=2) {
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=23) "DigiCert Nessie2025 Log",
                  (string) (len=5) "logId": (string) (len=64) "E6D2316340778CC1104106D771B9CEC1D240F6968486FBBA87321DFD1E378E50",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=144) "30460221009954F5C1470E07EAD353D06CB673A44C670B9AB4CA47B7F1078CD2837D2A86C3022100ACFF671BDDF55FE54F37A56F03D5E6C2CB69294C479C6940843459B75E3A9D22",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818608e+12
                },
                (map[string]interface {}) (len=8) {
                  (string) (len=13) "hashAlgorithm": (string) (len=7) "SHA-256",
                  (string) (len=14) "logDescription": (string) (len=21) "Sectigo 'Sabre2025h1'",
                  (string) (len=5) "logId": (string) (len=64) "E092B3FC0C1DC8E768361FDE61B9964D0A5278198A72D672C4B04DA56D6F5404",
                  (string) (len=6) "origin": (string) (len=23) "Embedded in certificate",
                  (string) (len=18) "signatureAlgorithm": (string) (len=5) "ECDSA",
                  (string) (len=13) "signatureData": (string) (len=142) "3045022100C8379C810B35866B869DB833814EF59B6F6FB4F90D3DFCDDB5C805BA83023FA10220041463F5EA701CEB49503EDD9F1EFB675332635E8A5292A780B37CF9B1EFC20E",
                  (string) (len=6) "status": (string) (len=8) "Verified",
                  (string) (len=9) "timestamp": (float64) 1.728482818634e+12
                }
              },
              CertificateTransparencyCompliance: (string) (len=9) "compliant",
              ServerSignatureAlgorithm: (int) 1027,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) (len=1) {
              (struct { Name string "json:\"name\""; Value string "json:\"value\"" }) {
                Name: (string) (len=15) "X-Frame-Options",
                Value: (string) (len=10) "SAMEORIGIN"
              }
            }
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) true,
          Hash: (string) (len=64) "2689367b205c16ce32ed4200942b8b8b1e262dfc70d9bc9fbc77c49699a4f1df",
          Size: (int) 2,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Asn: (string) (len=5) "63949",
            Country: (string) (len=2) "SG",
            Registrar: (string) (len=5) "apnic",
            Date: (string) (len=10) "2015-02-16",
            Description: (string) (len=43) "AKAMAI-LINODE-AP Akamai Connected Cloud, SG",
            Route: (string) (len=15) "104.200.28.0/22",
            Name: (string) (len=39) "AKAMAI-LINODE-AP Akamai Connected Cloud"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "US",
            Region: (string) (len=2) "NJ",
            Timezone: (string) (len=16) "America/New_York",
            City: (string) (len=12) "Cedar Knolls",
            Ll: ([]float64) (len=2) {
              (float64) 40.8229,
              (float64) -74.4592
            },
            CountryName: (string) (len=13) "United States",
            Metro: (int) 501
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Ptr: (string) (len=8) "savee.it"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=75) "https://st.savee-cdn.com/_next/static/chunks/pages/_app-1607120d08c80176.js",
          Host: (string) (len=16) "st.savee-cdn.com",
          Type: (string) (len=6) "script"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.70",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=30) "https://savee.it/wwwwwwintern/",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=76) "https://st.savee-cdn.com/_next/static/chunks/pages/index-d847a348a7e2bf8d.js",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=3) "Low",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851010004648e+06,
          WallTime: (float64) 1.731061476470656e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "script",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) (len=1) {
                (struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) {
                  FunctionName: (string) "",
                  ScriptId: (string) (len=3) "242",
                  Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
                  LineNumber: (int) 0,
                  ColumnNumber: (int) 28829
                }
              }
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=6) "Script",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 0,
          DataLength: (int) 7620,
          RequestId: (string) (len=8) "83855.70",
          Type: (string) (len=6) "Script",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=76) "https://st.savee-cdn.com/_next/static/chunks/pages/index-d847a348a7e2bf8d.js",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "10/27/2024 12:56:24",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1082",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.05",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "ed047e15a710abb4dd530214acda4fe9",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=30) "text/javascript; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:35 GMT",
              (string) (len=4) "etag": (string) (len=17) "\"d5594gzbfq5t5vo\"",
              (string) (len=13) "last-modified": (string) (len=29) "Fri, 25 Oct 2024 22:48:02 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding"
            },
            MimeType: (string) (len=15) "text/javascript",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851010015259e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 0.064,
              SendEnd: (float64) 0.064,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 65.899,
              ReceiveHeadersEnd: (float64) 80.365
            },
            ResponseTime: (float64) 1.731061475984652e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) {
              },
              CertificateTransparencyCompliance: (string) (len=7) "unknown",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) false,
          Hash: (string) (len=64) "dc6cdaccaef54621cdbc9f0c738163c961da191c79000d8f383babc25f1be44e",
          Size: (int) 7620,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
          Host: (string) (len=16) "st.savee-cdn.com",
          Type: (string) (len=6) "script"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.71",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=30) "https://savee.it/wwwwwwintern/",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=76) "https://st.savee-cdn.com/_next/static/chunks/pages/login-1fb778be10fdb784.js",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=3) "Low",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851010004885e+06,
          WallTime: (float64) 1.731061476470858e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "script",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) (len=1) {
                (struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) {
                  FunctionName: (string) "",
                  ScriptId: (string) (len=3) "242",
                  Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
                  LineNumber: (int) 0,
                  ColumnNumber: (int) 28829
                }
              }
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=6) "Script",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 0,
          DataLength: (int) 13486,
          RequestId: (string) (len=8) "83855.71",
          Type: (string) (len=6) "Script",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=76) "https://st.savee-cdn.com/_next/static/chunks/pages/login-1fb778be10fdb784.js",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "10/25/2024 22:55:37",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1079",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.05",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "53bd889daefbf5084e9f2f1cebbad927",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=30) "text/javascript; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:36 GMT",
              (string) (len=4) "etag": (string) (len=17) "\"d5594gzbfq5taem\"",
              (string) (len=13) "last-modified": (string) (len=29) "Fri, 25 Oct 2024 22:48:02 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding"
            },
            MimeType: (string) (len=15) "text/javascript",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851010015389e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 0.017,
              SendEnd: (float64) 0.017,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 65.943,
              ReceiveHeadersEnd: (float64) 95.624
            },
            ResponseTime: (float64) 1.731061476078366e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) {
              },
              CertificateTransparencyCompliance: (string) (len=7) "unknown",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) false,
          Hash: (string) (len=64) "9dbef32d80fff94ba12533d9be98312d775ee9c7cace4a59ec8f3a1c814e325d",
          Size: (int) 13486,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
          Host: (string) (len=16) "st.savee-cdn.com",
          Type: (string) (len=6) "script"
        }
      },
      (urlscanio.RequestResponse) {
        Request: (struct { RequestId string "json:\"requestId\""; LoaderId string "json:\"loaderId\""; DocumentURL string "json:\"documentURL\""; Request struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" } "json:\"request\""; Timestamp float64 "json:\"timestamp\""; WallTime float64 "json:\"wallTime\""; Initiator struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" } "json:\"initiator\""; RedirectHasExtraInfo bool "json:\"redirectHasExtraInfo\""; Type string "json:\"type\""; FrameId string "json:\"frameId\""; HasUserGesture bool "json:\"hasUserGesture\""; PrimaryRequest bool "json:\"primaryRequest,omitempty\""; RedirectResponse struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" } "json:\"redirectResponse,omitempty\"" }) {
          RequestId: (string) (len=8) "83855.72",
          LoaderId: (string) (len=32) "D7E440FCB1B35EBD6DA10571587B2699",
          DocumentURL: (string) (len=30) "https://savee.it/wwwwwwintern/",
          Request: (struct { Url string "json:\"url\""; Method string "json:\"method\""; Headers map[string]string "json:\"headers\""; MixedContentType string "json:\"mixedContentType\""; InitialPriority string "json:\"initialPriority\""; ReferrerPolicy string "json:\"referrerPolicy\""; IsSameSite bool "json:\"isSameSite\""; HasPostData bool "json:\"hasPostData,omitempty\""; PostDataEntries []struct { Bytes string "json:\"bytes\"" } "json:\"postDataEntries,omitempty\""; PostData string "json:\"postData,omitempty\"" }) {
            Url: (string) (len=75) "https://st.savee-cdn.com/_next/static/chunks/pages/join-f5b5e7499f4a6500.js",
            Method: (string) (len=3) "GET",
            Headers: (map[string]string) (len=2) {
              (string) (len=7) "Referer": (string) (len=17) "https://savee.it/",
              (string) (len=10) "User-Agent": (string) (len=101) "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36"
            },
            MixedContentType: (string) (len=4) "none",
            InitialPriority: (string) (len=3) "Low",
            ReferrerPolicy: (string) (len=6) "origin",
            IsSameSite: (bool) false,
            HasPostData: (bool) false,
            PostDataEntries: ([]struct { Bytes string "json:\"bytes\"" }) <nil>,
            PostData: (string) ""
          },
          Timestamp: (float64) 7.851010004993e+06,
          WallTime: (float64) 1.731061476470965e+09,
          Initiator: (struct { Type string "json:\"type\""; Url string "json:\"url,omitempty\""; LineNumber int "json:\"lineNumber,omitempty\""; ColumnNumber int "json:\"columnNumber,omitempty\""; Stack struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" } "json:\"stack,omitempty\"" }) {
            Type: (string) (len=6) "script",
            Url: (string) "",
            LineNumber: (int) 0,
            ColumnNumber: (int) 0,
            Stack: (struct { CallFrames []struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" } "json:\"callFrames\"" }) {
              CallFrames: ([]struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) (len=1) {
                (struct { FunctionName string "json:\"functionName\""; ScriptId string "json:\"scriptId\""; Url string "json:\"url\""; LineNumber int "json:\"lineNumber\""; ColumnNumber int "json:\"columnNumber\"" }) {
                  FunctionName: (string) "",
                  ScriptId: (string) (len=3) "242",
                  Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
                  LineNumber: (int) 0,
                  ColumnNumber: (int) 28829
                }
              }
            }
          },
          RedirectHasExtraInfo: (bool) false,
          Type: (string) (len=6) "Script",
          FrameId: (string) (len=32) "F31698E4B8123C2484686C56A65526EA",
          HasUserGesture: (bool) false,
          PrimaryRequest: (bool) false,
          RedirectResponse: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress\""; RemotePort int "json:\"remotePort\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing\""; ResponseTime float64 "json:\"responseTime\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails\"" }) {
            Url: (string) "",
            Status: (int) 0,
            StatusText: (string) "",
            Headers: (map[string]string) <nil>,
            MimeType: (string) "",
            RemoteIPAddress: (string) "",
            RemotePort: (int) 0,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 0,
              ProxyStart: (float64) 0,
              ProxyEnd: (float64) 0,
              DnsStart: (float64) 0,
              DnsEnd: (float64) 0,
              ConnectStart: (float64) 0,
              ConnectEnd: (float64) 0,
              SslStart: (float64) 0,
              SslEnd: (float64) 0,
              WorkerStart: (float64) 0,
              WorkerReady: (float64) 0,
              WorkerFetchStart: (float64) 0,
              WorkerRespondWithSettled: (float64) 0,
              SendStart: (float64) 0,
              SendEnd: (float64) 0,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 0,
              ReceiveHeadersEnd: (float64) 0
            },
            ResponseTime: (float64) 0,
            Protocol: (string) "",
            AlternateProtocolUsage: (string) "",
            SecurityState: (string) "",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) "",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) "",
              Cipher: (string) "",
              CertificateId: (int) 0,
              SubjectName: (string) "",
              SanList: ([]string) <nil>,
              Issuer: (string) "",
              ValidFrom: (int) 0,
              ValidTo: (int) 0,
              SignedCertificateTimestampList: ([]interface {}) <nil>,
              CertificateTransparencyCompliance: (string) "",
              ServerSignatureAlgorithm: (int) 0,
              EncryptedClientHello: (bool) false
            }
          }
        },
        Response: (struct { EncodedDataLength int "json:\"encodedDataLength\""; DataLength int "json:\"dataLength\""; RequestId string "json:\"requestId\""; Type string "json:\"type\""; Response struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" } "json:\"response\""; Failed struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" } "json:\"failed\""; HasExtraInfo bool "json:\"hasExtraInfo\""; Hash string "json:\"hash\""; Size int "json:\"size\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn,omitempty\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip,omitempty\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
          EncodedDataLength: (int) 0,
          DataLength: (int) 7564,
          RequestId: (string) (len=8) "83855.72",
          Type: (string) (len=6) "Script",
          Response: (struct { Url string "json:\"url\""; Status int "json:\"status\""; StatusText string "json:\"statusText\""; Headers map[string]string "json:\"headers\""; MimeType string "json:\"mimeType\""; RemoteIPAddress string "json:\"remoteIPAddress,omitempty\""; RemotePort int "json:\"remotePort,omitempty\""; EncodedDataLength int "json:\"encodedDataLength\""; Timing urlscanio.Timing "json:\"timing,omitempty\""; ResponseTime float64 "json:\"responseTime,omitempty\""; Protocol string "json:\"protocol\""; AlternateProtocolUsage string "json:\"alternateProtocolUsage,omitempty\""; SecurityState string "json:\"securityState\""; SecurityDetails struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" } "json:\"securityDetails,omitempty\""; SecurityHeaders []struct { Name string "json:\"name\""; Value string "json:\"value\"" } "json:\"securityHeaders,omitempty\"" }) {
            Url: (string) (len=75) "https://st.savee-cdn.com/_next/static/chunks/pages/join-f5b5e7499f4a6500.js",
            Status: (int) 200,
            StatusText: (string) "",
            Headers: (map[string]string) (len=23) {
              (string) (len=32) "access-control-allow-credentials": (string) (len=4) "true",
              (string) (len=27) "access-control-allow-origin": (string) (len=1) "*",
              (string) (len=7) "alt-svc": (string) (len=21) "h3=\":443\"; ma=2592000",
              (string) (len=13) "cache-control": (string) (len=16) "max-age=31536000",
              (string) (len=9) "cdn-cache": (string) (len=3) "HIT",
              (string) (len=12) "cdn-cachedat": (string) (len=19) "11/08/2024 03:14:12",
              (string) (len=17) "cdn-edgestorageid": (string) (len=4) "1081",
              (string) (len=12) "cdn-proxyver": (string) (len=4) "1.06",
              (string) (len=12) "cdn-pullzone": (string) (len=7) "1582246",
              (string) (len=22) "cdn-requestcountrycode": (string) (len=2) "IT",
              (string) (len=13) "cdn-requestid": (string) (len=32) "f775de4a3e4b59a40da376681b496765",
              (string) (len=19) "cdn-requestpullcode": (string) (len=3) "200",
              (string) (len=22) "cdn-requestpullsuccess": (string) (len=4) "True",
              (string) (len=15) "cdn-requesttime": (string) (len=1) "0",
              (string) (len=10) "cdn-status": (string) (len=3) "200",
              (string) (len=7) "cdn-uid": (string) (len=36) "75e2ff9c-7fbb-4a2c-ab0d-99c9e110ade1",
              (string) (len=16) "content-encoding": (string) (len=2) "br",
              (string) (len=12) "content-type": (string) (len=30) "text/javascript; charset=utf-8",
              (string) (len=4) "date": (string) (len=29) "Fri, 08 Nov 2024 10:24:36 GMT",
              (string) (len=4) "etag": (string) (len=17) "\"d5gbysryj0h35u4\"",
              (string) (len=13) "last-modified": (string) (len=29) "Thu, 07 Nov 2024 23:21:00 GMT",
              (string) (len=6) "server": (string) (len=17) "BunnyCDN-DE1-1082",
              (string) (len=4) "vary": (string) (len=15) "Accept-Encoding"
            },
            MimeType: (string) (len=15) "text/javascript",
            RemoteIPAddress: (string) (len=14) "169.150.247.39",
            RemotePort: (int) 443,
            EncodedDataLength: (int) 0,
            Timing: (urlscanio.Timing) {
              RequestTime: (float64) 7.851010015461e+06,
              ProxyStart: (float64) -1,
              ProxyEnd: (float64) -1,
              DnsStart: (float64) -1,
              DnsEnd: (float64) -1,
              ConnectStart: (float64) -1,
              ConnectEnd: (float64) -1,
              SslStart: (float64) -1,
              SslEnd: (float64) -1,
              WorkerStart: (float64) -1,
              WorkerReady: (float64) -1,
              WorkerFetchStart: (float64) -1,
              WorkerRespondWithSettled: (float64) -1,
              SendStart: (float64) 0.019,
              SendEnd: (float64) 0.019,
              PushStart: (float64) 0,
              PushEnd: (float64) 0,
              ReceiveHeadersStart: (float64) 65.908,
              ReceiveHeadersEnd: (float64) 96.604
            },
            ResponseTime: (float64) 1.731061476078442e+12,
            Protocol: (string) (len=2) "h2",
            AlternateProtocolUsage: (string) (len=17) "unspecifiedReason",
            SecurityState: (string) (len=6) "secure",
            SecurityDetails: (struct { Protocol string "json:\"protocol\""; KeyExchange string "json:\"keyExchange\""; KeyExchangeGroup string "json:\"keyExchangeGroup\""; Cipher string "json:\"cipher\""; CertificateId int "json:\"certificateId\""; SubjectName string "json:\"subjectName\""; SanList []string "json:\"sanList\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\""; SignedCertificateTimestampList []interface {} "json:\"signedCertificateTimestampList\""; CertificateTransparencyCompliance string "json:\"certificateTransparencyCompliance\""; ServerSignatureAlgorithm int "json:\"serverSignatureAlgorithm\""; EncryptedClientHello bool "json:\"encryptedClientHello\"" }) {
              Protocol: (string) (len=7) "TLS 1.3",
              KeyExchange: (string) "",
              KeyExchangeGroup: (string) (len=6) "X25519",
              Cipher: (string) (len=11) "AES_256_GCM",
              CertificateId: (int) 0,
              SubjectName: (string) (len=16) "st.savee-cdn.com",
              SanList: ([]string) (len=1) {
                (string) (len=16) "st.savee-cdn.com"
              },
              Issuer: (string) (len=3) "R11",
              ValidFrom: (int) 1727705429,
              ValidTo: (int) 1735481428,
              SignedCertificateTimestampList: ([]interface {}) {
              },
              CertificateTransparencyCompliance: (string) (len=7) "unknown",
              ServerSignatureAlgorithm: (int) 2052,
              EncryptedClientHello: (bool) false
            },
            SecurityHeaders: ([]struct { Name string "json:\"name\""; Value string "json:\"value\"" }) <nil>
          },
          Failed: (struct { RequestId string "json:\"requestId\""; Timestamp float64 "json:\"timestamp\""; Type string "json:\"type\""; ErrorText string "json:\"errorText\""; Canceled bool "json:\"canceled\"" }) {
            RequestId: (string) "",
            Timestamp: (float64) 0,
            Type: (string) "",
            ErrorText: (string) "",
            Canceled: (bool) false
          },
          HasExtraInfo: (bool) false,
          Hash: (string) (len=64) "c5585a7cda04d73cf504875748aae1f70055d38d4600c1b19de9c2418d93930e",
          Size: (int) 7562,
          Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
            Country: (string) (len=2) "DE",
            Region: (string) (len=2) "HE",
            Timezone: (string) (len=13) "Europe/Berlin",
            City: (string) (len=17) "Frankfurt am Main",
            Ll: ([]float64) (len=2) {
              (float64) 50.1187,
              (float64) 8.6842
            },
            CountryName: (string) (len=7) "Germany",
            Metro: (int) 0
          },
          Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        },
        InitiatorInfo: (struct { Url string "json:\"url\""; Host string "json:\"host\""; Type string "json:\"type\"" }) {
          Url: (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
          Host: (string) (len=16) "st.savee-cdn.com",
          Type: (string) (len=6) "script"
        }
      }
    },
    Cookies: (urlscanio.NullableSlice[phish.report/urlscanio-go.Cookie]) {
    },
    Console: ([]urlscanio.ConsoleLog) {
    },
    Links: ([]struct { Href string "json:\"href\""; Text string "json:\"text\"" }) {
    },
    Timing: (struct { BeginNavigation time.Time "json:\"beginNavigation\""; FrameStartedLoading time.Time "json:\"frameStartedLoading\""; FrameNavigated time.Time "json:\"frameNavigated\""; DomContentEventFired time.Time "json:\"domContentEventFired\""; FrameStoppedLoading time.Time "json:\"frameStoppedLoading\"" }) {
      BeginNavigation: (time.Time) 2024-11-08 10:24:25.146 +0000 UTC,
      FrameStartedLoading: (time.Time) 2024-11-08 10:24:36.551 +0000 UTC,
      FrameNavigated: (time.Time) 2024-11-08 10:24:29.422 +0000 UTC,
      DomContentEventFired: (time.Time) 2024-11-08 10:24:36.55 +0000 UTC,
      FrameStoppedLoading: (time.Time) 2024-11-08 10:24:36.551 +0000 UTC
    },
    Globals: ([]struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) (len=21) {
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=15) "_sentryDebugIds",
        Type: (string) (len=6) "object"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=24) "_sentryDebugIdIdentifier",
        Type: (string) (len=6) "string"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=16) "webpackChunk_N_E",
        Type: (string) (len=6) "object"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=24) "__next_set_public_path__",
        Type: (string) (len=8) "function"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=4) "next",
        Type: (string) (len=6) "object"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=13) "__NEXT_DATA__",
        Type: (string) (len=6) "object"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=17) "__SSG_MANIFEST_CB",
        Type: (string) (len=8) "function"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=8) "__NEXT_P",
        Type: (string) (len=6) "object"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=4) "_N_E",
        Type: (string) (len=6) "object"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=10) "__SENTRY__",
        Type: (string) (len=6) "object"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=28) "__sentryRewritesTunnelPath__",
        Type: (string) (len=6) "string"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=14) "SENTRY_RELEASE",
        Type: (string) (len=6) "object"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=35) "__sentry_instrumentation_handlers__",
        Type: (string) (len=6) "object"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=12) "gsapVersions",
        Type: (string) (len=6) "object"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=12) "_initialized",
        Type: (string) (len=7) "boolean"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=21) "__MIDDLEWARE_MATCHERS",
        Type: (string) (len=6) "object"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=16) "__BUILD_MANIFEST",
        Type: (string) (len=6) "object"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=14) "__SSG_MANIFEST",
        Type: (string) (len=6) "object"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=17) "__APOLLO_CLIENT__",
        Type: (string) (len=6) "object"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=9) "plausible",
        Type: (string) (len=8) "function"
      },
      (struct { Prop string "json:\"prop\""; Type string "json:\"type\"" }) {
        Prop: (string) (len=19) "__NEXT_PRELOADREADY",
        Type: (string) (len=8) "function"
      }
    }
  },
  Stats: (struct { ResourceStats urlscanio.NullableSlice[struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Latency int "json:\"latency\""; Countries []string "json:\"countries\""; Ips []string "json:\"ips\""; Type string "json:\"type\""; Compression string "json:\"compression\""; Percentage int "json:\"percentage\"" }] "json:\"resourceStats\""; ProtocolStats urlscanio.NullableSlice[struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Ips []string "json:\"ips\""; Countries []string "json:\"countries\""; SecurityState struct {} "json:\"securityState\""; Protocol string "json:\"protocol\"" }] "json:\"protocolStats\""; TlsStats urlscanio.NullableSlice[struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Ips []string "json:\"ips\""; Countries []string "json:\"countries\""; Protocols struct { TLS13AES128GCM int "json:\"TLS 1.3 /  / AES_128_GCM\""; QUICAES128GCM int "json:\"QUIC /  / AES_128_GCM\"" } "json:\"protocols\""; SecurityState string "json:\"securityState\"" }] "json:\"tlsStats\""; ServerStats urlscanio.NullableSlice[struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Ips []string "json:\"ips\""; Countries []string "json:\"countries\""; Server string "json:\"server\"" }] "json:\"serverStats\""; DomainStats urlscanio.NullableSlice[struct { Count int "json:\"count\""; Ips []string "json:\"ips\""; Domain string "json:\"domain\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []string "json:\"countries\""; Index int "json:\"index\""; Initiators []string "json:\"initiators\""; Redirects int "json:\"redirects\"" }] "json:\"domainStats\""; RegDomainStats urlscanio.NullableSlice[struct { Count int "json:\"count\""; Ips []string "json:\"ips\""; RegDomain string "json:\"regDomain\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []interface {} "json:\"countries\""; Index int "json:\"index\""; SubDomains []struct { Domain string "json:\"domain\""; Country string "json:\"country\"" } "json:\"subDomains\""; Redirects int "json:\"redirects\"" }] "json:\"regDomainStats\""; SecureRequests int "json:\"secureRequests\""; SecurePercentage int "json:\"securePercentage\""; IPv6Percentage int "json:\"IPv6Percentage\""; UniqCountries int "json:\"uniqCountries\""; TotalLinks int "json:\"totalLinks\""; Malicious int "json:\"malicious\""; AdBlocked int "json:\"adBlocked\""; IpStats urlscanio.NullableSlice[struct { Requests int "json:\"requests\""; Domains []string "json:\"domains\""; Ip string "json:\"ip\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn\""; Dns struct {} "json:\"dns\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []string "json:\"countries\""; Index int "json:\"index\""; Ipv6 bool "json:\"ipv6\""; Redirects int "json:\"redirects\""; Count interface {} "json:\"count\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }] "json:\"ipStats\"" }) {
    ResourceStats: (urlscanio.NullableSlice[struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Latency int "json:\"latency\""; Countries []string "json:\"countries\""; Ips []string "json:\"ips\""; Type string "json:\"type\""; Compression string "json:\"compression\""; Percentage int "json:\"percentage\"" }]) (len=7) {
      (struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Latency int "json:\"latency\""; Countries []string "json:\"countries\""; Ips []string "json:\"ips\""; Type string "json:\"type\""; Compression string "json:\"compression\""; Percentage int "json:\"percentage\"" }) {
        Count: (int) 11,
        Size: (int) 1682672,
        EncodedSize: (int) 500985,
        Latency: (int) 0,
        Countries: ([]string) (len=2) {
          (string) (len=2) "DE",
          (string) (len=2) "US"
        },
        Ips: ([]string) (len=2) {
          (string) (len=14) "169.150.247.39",
          (string) (len=14) "104.200.31.245"
        },
        Type: (string) (len=6) "Script",
        Compression: (string) (len=3) "3.4",
        Percentage: (int) 44
      },
      (struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Latency int "json:\"latency\""; Countries []string "json:\"countries\""; Ips []string "json:\"ips\""; Type string "json:\"type\""; Compression string "json:\"compression\""; Percentage int "json:\"percentage\"" }) {
        Count: (int) 5,
        Size: (int) 2768,
        EncodedSize: (int) 15349,
        Latency: (int) 0,
        Countries: ([]string) (len=1) {
          (string) (len=2) "DE"
        },
        Ips: ([]string) (len=1) {
          (string) (len=14) "169.150.247.39"
        },
        Type: (string) (len=5) "Other",
        Compression: (string) (len=3) "0.2",
        Percentage: (int) 20
      },
      (struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Latency int "json:\"latency\""; Countries []string "json:\"countries\""; Ips []string "json:\"ips\""; Type string "json:\"type\""; Compression string "json:\"compression\""; Percentage int "json:\"percentage\"" }) {
        Count: (int) 4,
        Size: (int) 158,
        EncodedSize: (int) 468,
        Latency: (int) 0,
        Countries: ([]string) (len=1) {
          (string) (len=2) "US"
        },
        Ips: ([]string) (len=1) {
          (string) (len=14) "104.200.31.245"
        },
        Type: (string) (len=5) "Fetch",
        Compression: (string) (len=3) "0.3",
        Percentage: (int) 16
      },
      (struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Latency int "json:\"latency\""; Countries []string "json:\"countries\""; Ips []string "json:\"ips\""; Type string "json:\"type\""; Compression string "json:\"compression\""; Percentage int "json:\"percentage\"" }) {
        Count: (int) 1,
        Size: (int) 2,
        EncodedSize: (int) 146,
        Latency: (int) 0,
        Countries: ([]string) (len=1) {
          (string) (len=2) "US"
        },
        Ips: ([]string) (len=1) {
          (string) (len=14) "104.200.31.245"
        },
        Type: (string) (len=3) "XHR",
        Compression: (string) (len=3) "0.0",
        Percentage: (int) 4
      },
      (struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Latency int "json:\"latency\""; Countries []string "json:\"countries\""; Ips []string "json:\"ips\""; Type string "json:\"type\""; Compression string "json:\"compression\""; Percentage int "json:\"percentage\"" }) {
        Count: (int) 1,
        Size: (int) 108488,
        EncodedSize: (int) 109465,
        Latency: (int) 0,
        Countries: ([]string) {
        },
        Ips: ([]string) (len=1) {
          (string) (len=14) "104.21.234.234"
        },
        Type: (string) (len=4) "Font",
        Compression: (string) (len=3) "1.0",
        Percentage: (int) 4
      },
      (struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Latency int "json:\"latency\""; Countries []string "json:\"countries\""; Ips []string "json:\"ips\""; Type string "json:\"type\""; Compression string "json:\"compression\""; Percentage int "json:\"percentage\"" }) {
        Count: (int) 1,
        Size: (int) 94075,
        EncodedSize: (int) 16294,
        Latency: (int) 0,
        Countries: ([]string) (len=1) {
          (string) (len=2) "DE"
        },
        Ips: ([]string) (len=1) {
          (string) (len=14) "169.150.247.39"
        },
        Type: (string) (len=10) "Stylesheet",
        Compression: (string) (len=3) "5.8",
        Percentage: (int) 4
      },
      (struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Latency int "json:\"latency\""; Countries []string "json:\"countries\""; Ips []string "json:\"ips\""; Type string "json:\"type\""; Compression string "json:\"compression\""; Percentage int "json:\"percentage\"" }) {
        Count: (int) 1,
        Size: (int) 12219,
        EncodedSize: (int) 4525,
        Latency: (int) 0,
        Countries: ([]string) (len=1) {
          (string) (len=2) "US"
        },
        Ips: ([]string) (len=1) {
          (string) (len=14) "104.200.31.245"
        },
        Type: (string) (len=8) "Document",
        Compression: (string) (len=3) "2.7",
        Percentage: (int) 4
      }
    },
    ProtocolStats: (urlscanio.NullableSlice[struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Ips []string "json:\"ips\""; Countries []string "json:\"countries\""; SecurityState struct {} "json:\"securityState\""; Protocol string "json:\"protocol\"" }]) (len=1) {
      (struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Ips []string "json:\"ips\""; Countries []string "json:\"countries\""; SecurityState struct {} "json:\"securityState\""; Protocol string "json:\"protocol\"" }) {
        Count: (int) 24,
        Size: (int) 1900382,
        EncodedSize: (int) 647232,
        Ips: ([]string) (len=3) {
          (string) (len=14) "104.200.31.245",
          (string) (len=14) "169.150.247.39",
          (string) (len=14) "104.21.234.234"
        },
        Countries: ([]string) (len=2) {
          (string) (len=2) "US",
          (string) (len=2) "DE"
        },
        SecurityState: (struct {}) {
        },
        Protocol: (string) (len=2) "h2"
      }
    },
    TlsStats: (urlscanio.NullableSlice[struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Ips []string "json:\"ips\""; Countries []string "json:\"countries\""; Protocols struct { TLS13AES128GCM int "json:\"TLS 1.3 /  / AES_128_GCM\""; QUICAES128GCM int "json:\"QUIC /  / AES_128_GCM\"" } "json:\"protocols\""; SecurityState string "json:\"securityState\"" }]) (len=2) {
      (struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Ips []string "json:\"ips\""; Countries []string "json:\"countries\""; Protocols struct { TLS13AES128GCM int "json:\"TLS 1.3 /  / AES_128_GCM\""; QUICAES128GCM int "json:\"QUIC /  / AES_128_GCM\"" } "json:\"protocols\""; SecurityState string "json:\"securityState\"" }) {
        Count: (int) 21,
        Size: (int) 1900376,
        EncodedSize: (int) 647012,
        Ips: ([]string) (len=3) {
          (string) (len=14) "104.200.31.245",
          (string) (len=14) "169.150.247.39",
          (string) (len=14) "104.21.234.234"
        },
        Countries: ([]string) (len=2) {
          (string) (len=2) "US",
          (string) (len=2) "DE"
        },
        Protocols: (struct { TLS13AES128GCM int "json:\"TLS 1.3 /  / AES_128_GCM\""; QUICAES128GCM int "json:\"QUIC /  / AES_128_GCM\"" }) {
          TLS13AES128GCM: (int) 5,
          QUICAES128GCM: (int) 0
        },
        SecurityState: (string) (len=6) "secure"
      },
      (struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Ips []string "json:\"ips\""; Countries []string "json:\"countries\""; Protocols struct { TLS13AES128GCM int "json:\"TLS 1.3 /  / AES_128_GCM\""; QUICAES128GCM int "json:\"QUIC /  / AES_128_GCM\"" } "json:\"protocols\""; SecurityState string "json:\"securityState\"" }) {
        Count: (int) 3,
        Size: (int) 6,
        EncodedSize: (int) 220,
        Ips: ([]string) (len=1) {
          (string) (len=14) "104.200.31.245"
        },
        Countries: ([]string) (len=1) {
          (string) (len=2) "US"
        },
        Protocols: (struct { TLS13AES128GCM int "json:\"TLS 1.3 /  / AES_128_GCM\""; QUICAES128GCM int "json:\"QUIC /  / AES_128_GCM\"" }) {
          TLS13AES128GCM: (int) 0,
          QUICAES128GCM: (int) 0
        },
        SecurityState: (string) (len=7) "unknown"
      }
    },
    ServerStats: (urlscanio.NullableSlice[struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Ips []string "json:\"ips\""; Countries []string "json:\"countries\""; Server string "json:\"server\"" }]) (len=2) {
      (struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Ips []string "json:\"ips\""; Countries []string "json:\"countries\""; Server string "json:\"server\"" }) {
        Count: (int) 16,
        Size: (int) 1778108,
        EncodedSize: (int) 531470,
        Ips: ([]string) (len=1) {
          (string) (len=14) "169.150.247.39"
        },
        Countries: ([]string) (len=1) {
          (string) (len=2) "DE"
        },
        Server: (string) (len=17) "BunnyCDN-DE1-1082"
      },
      (struct { Count int "json:\"count\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Ips []string "json:\"ips\""; Countries []string "json:\"countries\""; Server string "json:\"server\"" }) {
        Count: (int) 1,
        Size: (int) 108488,
        EncodedSize: (int) 109465,
        Ips: ([]string) (len=1) {
          (string) (len=14) "104.21.234.234"
        },
        Countries: ([]string) {
        },
        Server: (string) (len=10) "cloudflare"
      }
    },
    DomainStats: (urlscanio.NullableSlice[struct { Count int "json:\"count\""; Ips []string "json:\"ips\""; Domain string "json:\"domain\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []string "json:\"countries\""; Index int "json:\"index\""; Initiators []string "json:\"initiators\""; Redirects int "json:\"redirects\"" }]) (len=4) {
      (struct { Count int "json:\"count\""; Ips []string "json:\"ips\""; Domain string "json:\"domain\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []string "json:\"countries\""; Index int "json:\"index\""; Initiators []string "json:\"initiators\""; Redirects int "json:\"redirects\"" }) {
        Count: (int) 16,
        Ips: ([]string) (len=1) {
          (string) (len=14) "169.150.247.39"
        },
        Domain: (string) (len=16) "st.savee-cdn.com",
        Size: (int) 1778108,
        EncodedSize: (int) 531470,
        Countries: ([]string) (len=1) {
          (string) (len=2) "DE"
        },
        Index: (int) 3,
        Initiators: ([]string) (len=2) {
          (string) (len=8) "savee.it",
          (string) (len=16) "st.savee-cdn.com"
        },
        Redirects: (int) 0
      },
      (struct { Count int "json:\"count\""; Ips []string "json:\"ips\""; Domain string "json:\"domain\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []string "json:\"countries\""; Index int "json:\"index\""; Initiators []string "json:\"initiators\""; Redirects int "json:\"redirects\"" }) {
        Count: (int) 11,
        Ips: ([]string) (len=1) {
          (string) (len=14) "104.200.31.245"
        },
        Domain: (string) (len=8) "savee.it",
        Size: (int) 13786,
        EncodedSize: (int) 6891,
        Countries: ([]string) (len=1) {
          (string) (len=2) "US"
        },
        Index: (int) 1,
        Initiators: ([]string) (len=1) {
          (string) (len=16) "st.savee-cdn.com"
        },
        Redirects: (int) 4
      },
      (struct { Count int "json:\"count\""; Ips []string "json:\"ips\""; Domain string "json:\"domain\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []string "json:\"countries\""; Index int "json:\"index\""; Initiators []string "json:\"initiators\""; Redirects int "json:\"redirects\"" }) {
        Count: (int) 1,
        Ips: ([]string) (len=1) {
          (string) (len=14) "104.21.234.234"
        },
        Domain: (string) (len=7) "rsms.me",
        Size: (int) 108488,
        EncodedSize: (int) 109465,
        Countries: ([]string) {
        },
        Index: (int) 11,
        Initiators: ([]string) (len=1) {
          (string) (len=16) "st.savee-cdn.com"
        },
        Redirects: (int) 0
      },
      (struct { Count int "json:\"count\""; Ips []string "json:\"ips\""; Domain string "json:\"domain\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []string "json:\"countries\""; Index int "json:\"index\""; Initiators []string "json:\"initiators\""; Redirects int "json:\"redirects\"" }) {
        Count: (int) 1,
        Ips: ([]string) (len=1) {
          (string) (len=14) "104.200.31.245"
        },
        Domain: (string) (len=23) "www.www.intern.savee.it",
        Size: (int) 0,
        EncodedSize: (int) 206,
        Countries: ([]string) (len=1) {
          (string) (len=2) "US"
        },
        Index: (int) 0,
        Initiators: ([]string) {
        },
        Redirects: (int) 1
      }
    },
    RegDomainStats: (urlscanio.NullableSlice[struct { Count int "json:\"count\""; Ips []string "json:\"ips\""; RegDomain string "json:\"regDomain\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []interface {} "json:\"countries\""; Index int "json:\"index\""; SubDomains []struct { Domain string "json:\"domain\""; Country string "json:\"country\"" } "json:\"subDomains\""; Redirects int "json:\"redirects\"" }]) (len=3) {
      (struct { Count int "json:\"count\""; Ips []string "json:\"ips\""; RegDomain string "json:\"regDomain\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []interface {} "json:\"countries\""; Index int "json:\"index\""; SubDomains []struct { Domain string "json:\"domain\""; Country string "json:\"country\"" } "json:\"subDomains\""; Redirects int "json:\"redirects\"" }) {
        Count: (int) 16,
        Ips: ([]string) (len=1) {
          (string) (len=14) "169.150.247.39"
        },
        RegDomain: (string) (len=13) "savee-cdn.com",
        Size: (int) 1778108,
        EncodedSize: (int) 531470,
        Countries: ([]interface {}) {
        },
        Index: (int) 3,
        SubDomains: ([]struct { Domain string "json:\"domain\""; Country string "json:\"country\"" }) (len=1) {
          (struct { Domain string "json:\"domain\""; Country string "json:\"country\"" }) {
            Domain: (string) (len=2) "st",
            Country: (string) (len=2) "DE"
          }
        },
        Redirects: (int) 0
      },
      (struct { Count int "json:\"count\""; Ips []string "json:\"ips\""; RegDomain string "json:\"regDomain\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []interface {} "json:\"countries\""; Index int "json:\"index\""; SubDomains []struct { Domain string "json:\"domain\""; Country string "json:\"country\"" } "json:\"subDomains\""; Redirects int "json:\"redirects\"" }) {
        Count: (int) 12,
        Ips: ([]string) (len=1) {
          (string) (len=14) "104.200.31.245"
        },
        RegDomain: (string) (len=8) "savee.it",
        Size: (int) 13786,
        EncodedSize: (int) 7097,
        Countries: ([]interface {}) {
        },
        Index: (int) 0,
        SubDomains: ([]struct { Domain string "json:\"domain\""; Country string "json:\"country\"" }) (len=2) {
          (struct { Domain string "json:\"domain\""; Country string "json:\"country\"" }) {
            Domain: (string) (len=14) "www.www.intern",
            Country: (string) (len=2) "US"
          },
          (struct { Domain string "json:\"domain\""; Country string "json:\"country\"" }) {
            Domain: (string) "",
            Country: (string) (len=2) "US"
          }
        },
        Redirects: (int) 5
      },
      (struct { Count int "json:\"count\""; Ips []string "json:\"ips\""; RegDomain string "json:\"regDomain\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []interface {} "json:\"countries\""; Index int "json:\"index\""; SubDomains []struct { Domain string "json:\"domain\""; Country string "json:\"country\"" } "json:\"subDomains\""; Redirects int "json:\"redirects\"" }) {
        Count: (int) 1,
        Ips: ([]string) (len=1) {
          (string) (len=14) "104.21.234.234"
        },
        RegDomain: (string) (len=7) "rsms.me",
        Size: (int) 108488,
        EncodedSize: (int) 109465,
        Countries: ([]interface {}) {
        },
        Index: (int) 11,
        SubDomains: ([]struct { Domain string "json:\"domain\""; Country string "json:\"country\"" }) (len=1) {
          (struct { Domain string "json:\"domain\""; Country string "json:\"country\"" }) {
            Domain: (string) "",
            Country: (string) ""
          }
        },
        Redirects: (int) 0
      }
    },
    SecureRequests: (int) 21,
    SecurePercentage: (int) 84,
    IPv6Percentage: (int) 0,
    UniqCountries: (int) 3,
    TotalLinks: (int) 0,
    Malicious: (int) 0,
    AdBlocked: (int) 0,
    IpStats: (urlscanio.NullableSlice[struct { Requests int "json:\"requests\""; Domains []string "json:\"domains\""; Ip string "json:\"ip\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn\""; Dns struct {} "json:\"dns\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []string "json:\"countries\""; Index int "json:\"index\""; Ipv6 bool "json:\"ipv6\""; Redirects int "json:\"redirects\""; Count interface {} "json:\"count\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }]) (len=3) {
      (struct { Requests int "json:\"requests\""; Domains []string "json:\"domains\""; Ip string "json:\"ip\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn\""; Dns struct {} "json:\"dns\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []string "json:\"countries\""; Index int "json:\"index\""; Ipv6 bool "json:\"ipv6\""; Redirects int "json:\"redirects\""; Count interface {} "json:\"count\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
        Requests: (int) 12,
        Domains: ([]string) (len=2) {
          (string) (len=23) "www.www.intern.savee.it",
          (string) (len=8) "savee.it"
        },
        Ip: (string) (len=14) "104.200.31.245",
        Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
          Ip: (string) (len=14) "104.200.31.245",
          Asn: (string) (len=5) "63949",
          Country: (string) (len=2) "SG",
          Registrar: (string) (len=5) "apnic",
          Date: (string) (len=10) "2015-02-16",
          Description: (string) (len=43) "AKAMAI-LINODE-AP Akamai Connected Cloud, SG",
          Route: (string) (len=15) "104.200.28.0/22",
          Name: (string) (len=39) "AKAMAI-LINODE-AP Akamai Connected Cloud"
        },
        Dns: (struct {}) {
        },
        Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
          Country: (string) (len=2) "US",
          Region: (string) (len=2) "NJ",
          Timezone: (string) (len=16) "America/New_York",
          City: (string) (len=12) "Cedar Knolls",
          Ll: ([]float64) (len=2) {
            (float64) 40.8229,
            (float64) -74.4592
          },
          CountryName: (string) (len=13) "United States",
          Metro: (int) 501
        },
        Size: (int) 13786,
        EncodedSize: (int) 7097,
        Countries: ([]string) (len=1) {
          (string) (len=2) "US"
        },
        Index: (int) 0,
        Ipv6: (bool) false,
        Redirects: (int) 5,
        Count: (interface {}) <nil>,
        Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
          Ip: (string) (len=14) "104.200.31.245",
          Ptr: (string) (len=8) "savee.it"
        }
      },
      (struct { Requests int "json:\"requests\""; Domains []string "json:\"domains\""; Ip string "json:\"ip\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn\""; Dns struct {} "json:\"dns\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []string "json:\"countries\""; Index int "json:\"index\""; Ipv6 bool "json:\"ipv6\""; Redirects int "json:\"redirects\""; Count interface {} "json:\"count\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
        Requests: (int) 16,
        Domains: ([]string) (len=1) {
          (string) (len=16) "st.savee-cdn.com"
        },
        Ip: (string) (len=14) "169.150.247.39",
        Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
          Ip: (string) (len=14) "169.150.247.39",
          Asn: (string) (len=5) "60068",
          Country: (string) (len=2) "GB",
          Registrar: (string) (len=7) "ripencc",
          Date: (string) (len=10) "2014-06-04",
          Description: (string) (len=11) "CDN77 _, GB",
          Route: (string) (len=16) "169.150.247.0/24",
          Name: (string) (len=7) "CDN77 _"
        },
        Dns: (struct {}) {
        },
        Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
          Country: (string) (len=2) "DE",
          Region: (string) (len=2) "HE",
          Timezone: (string) (len=13) "Europe/Berlin",
          City: (string) (len=17) "Frankfurt am Main",
          Ll: ([]float64) (len=2) {
            (float64) 50.1187,
            (float64) 8.6842
          },
          CountryName: (string) (len=7) "Germany",
          Metro: (int) 0
        },
        Size: (int) 1778108,
        EncodedSize: (int) 531470,
        Countries: ([]string) (len=1) {
          (string) (len=2) "DE"
        },
        Index: (int) 3,
        Ipv6: (bool) false,
        Redirects: (int) 0,
        Count: (interface {}) <nil>,
        Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
          Ip: (string) (len=14) "169.150.247.39",
          Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
        }
      },
      (struct { Requests int "json:\"requests\""; Domains []string "json:\"domains\""; Ip string "json:\"ip\""; Asn struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"asn\""; Dns struct {} "json:\"dns\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip\""; Size int "json:\"size\""; EncodedSize int "json:\"encodedSize\""; Countries []string "json:\"countries\""; Index int "json:\"index\""; Ipv6 bool "json:\"ipv6\""; Redirects int "json:\"redirects\""; Count interface {} "json:\"count\""; Rdns struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"rdns,omitempty\"" }) {
        Requests: (int) 1,
        Domains: ([]string) (len=1) {
          (string) (len=7) "rsms.me"
        },
        Ip: (string) (len=14) "104.21.234.234",
        Asn: (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
          Ip: (string) (len=14) "104.21.234.234",
          Asn: (string) (len=5) "13335",
          Country: (string) (len=2) "US",
          Registrar: (string) (len=4) "arin",
          Date: (string) (len=10) "2010-07-14",
          Description: (string) (len=17) "CLOUDFLARENET, US",
          Route: (string) (len=15) "104.21.224.0/20",
          Name: (string) (len=13) "CLOUDFLARENET"
        },
        Dns: (struct {}) {
        },
        Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
          Country: (string) "",
          Region: (string) "",
          Timezone: (string) "",
          City: (string) "",
          Ll: ([]float64) <nil>,
          CountryName: (string) "",
          Metro: (int) 0
        },
        Size: (int) 108488,
        EncodedSize: (int) 109465,
        Countries: ([]string) {
        },
        Index: (int) 11,
        Ipv6: (bool) false,
        Redirects: (int) 0,
        Count: (interface {}) <nil>,
        Rdns: (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
          Ip: (string) "",
          Ptr: (string) ""
        }
      }
    }
  },
  Meta: (urlscanio.ScanMeta) {
    Processors: (struct { Umbrella struct { Data []struct { Hostname string "json:\"hostname\""; Rank int "json:\"rank\"" } "json:\"data\"" } "json:\"umbrella\""; Geoip struct { Data []struct { Ip string "json:\"ip\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip\"" } "json:\"data\"" } "json:\"geoip\""; Asn struct { Data []struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"data\"" } "json:\"asn\""; Rdns struct { Data []struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"data\"" } "json:\"rdns\""; Wappa struct { Data []struct { Confidence []struct { Confidence int "json:\"confidence\""; Pattern string "json:\"pattern\"" } "json:\"confidence\""; ConfidenceTotal int "json:\"confidenceTotal\""; App string "json:\"app\""; Icon string "json:\"icon\""; Website string "json:\"website\""; Categories []struct { Name string "json:\"name\""; Priority int "json:\"priority\"" } "json:\"categories\"" } "json:\"data\"" } "json:\"wappa\"" }) {
      Umbrella: (struct { Data []struct { Hostname string "json:\"hostname\""; Rank int "json:\"rank\"" } "json:\"data\"" }) {
        Data: ([]struct { Hostname string "json:\"hostname\""; Rank int "json:\"rank\"" }) (len=2) {
          (struct { Hostname string "json:\"hostname\""; Rank int "json:\"rank\"" }) {
            Hostname: (string) (len=8) "savee.it",
            Rank: (int) 866761
          },
          (struct { Hostname string "json:\"hostname\""; Rank int "json:\"rank\"" }) {
            Hostname: (string) (len=7) "rsms.me",
            Rank: (int) 9083
          }
        }
      },
      Geoip: (struct { Data []struct { Ip string "json:\"ip\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip\"" } "json:\"data\"" }) {
        Data: ([]struct { Ip string "json:\"ip\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip\"" }) (len=3) {
          (struct { Ip string "json:\"ip\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
              Country: (string) (len=2) "US",
              Region: (string) (len=2) "NJ",
              Timezone: (string) (len=16) "America/New_York",
              City: (string) (len=12) "Cedar Knolls",
              Ll: ([]float64) (len=2) {
                (float64) 40.8229,
                (float64) -74.4592
              },
              CountryName: (string) (len=13) "United States",
              Metro: (int) 501
            }
          },
          (struct { Ip string "json:\"ip\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
              Country: (string) (len=2) "DE",
              Region: (string) (len=2) "HE",
              Timezone: (string) (len=13) "Europe/Berlin",
              City: (string) (len=17) "Frankfurt am Main",
              Ll: ([]float64) (len=2) {
                (float64) 50.1187,
                (float64) 8.6842
              },
              CountryName: (string) (len=7) "Germany",
              Metro: (int) 0
            }
          },
          (struct { Ip string "json:\"ip\""; Geoip struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" } "json:\"geoip\"" }) {
            Ip: (string) (len=14) "104.21.234.234",
            Geoip: (struct { Country string "json:\"country\""; Region string "json:\"region\""; Timezone string "json:\"timezone\""; City string "json:\"city\""; Ll []float64 "json:\"ll\""; CountryName string "json:\"country_name\""; Metro int "json:\"metro\"" }) {
              Country: (string) "",
              Region: (string) "",
              Timezone: (string) "",
              City: (string) "",
              Ll: ([]float64) <nil>,
              CountryName: (string) "",
              Metro: (int) 0
            }
          }
        }
      },
      Asn: (struct { Data []struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" } "json:\"data\"" }) {
        Data: ([]struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) (len=3) {
          (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Asn: (string) (len=5) "63949",
            Country: (string) (len=2) "SG",
            Registrar: (string) (len=5) "apnic",
            Date: (string) (len=10) "2015-02-16",
            Description: (string) (len=43) "AKAMAI-LINODE-AP Akamai Connected Cloud, SG",
            Route: (string) (len=15) "104.200.28.0/22",
            Name: (string) (len=39) "AKAMAI-LINODE-AP Akamai Connected Cloud"
          },
          (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Asn: (string) (len=5) "60068",
            Country: (string) (len=2) "GB",
            Registrar: (string) (len=7) "ripencc",
            Date: (string) (len=10) "2014-06-04",
            Description: (string) (len=11) "CDN77 _, GB",
            Route: (string) (len=16) "169.150.247.0/24",
            Name: (string) (len=7) "CDN77 _"
          },
          (struct { Ip string "json:\"ip\""; Asn string "json:\"asn\""; Country string "json:\"country\""; Registrar string "json:\"registrar\""; Date string "json:\"date\""; Description string "json:\"description\""; Route string "json:\"route\""; Name string "json:\"name\"" }) {
            Ip: (string) (len=14) "104.21.234.234",
            Asn: (string) (len=5) "13335",
            Country: (string) (len=2) "US",
            Registrar: (string) (len=4) "arin",
            Date: (string) (len=10) "2010-07-14",
            Description: (string) (len=17) "CLOUDFLARENET, US",
            Route: (string) (len=15) "104.21.224.0/20",
            Name: (string) (len=13) "CLOUDFLARENET"
          }
        }
      },
      Rdns: (struct { Data []struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" } "json:\"data\"" }) {
        Data: ([]struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) (len=2) {
          (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "104.200.31.245",
            Ptr: (string) (len=8) "savee.it"
          },
          (struct { Ip string "json:\"ip\""; Ptr string "json:\"ptr\"" }) {
            Ip: (string) (len=14) "169.150.247.39",
            Ptr: (string) (len=29) "169-150-247-39.bunnyinfra.net"
          }
        }
      },
      Wappa: (struct { Data []struct { Confidence []struct { Confidence int "json:\"confidence\""; Pattern string "json:\"pattern\"" } "json:\"confidence\""; ConfidenceTotal int "json:\"confidenceTotal\""; App string "json:\"app\""; Icon string "json:\"icon\""; Website string "json:\"website\""; Categories []struct { Name string "json:\"name\""; Priority int "json:\"priority\"" } "json:\"categories\"" } "json:\"data\"" }) {
        Data: ([]struct { Confidence []struct { Confidence int "json:\"confidence\""; Pattern string "json:\"pattern\"" } "json:\"confidence\""; ConfidenceTotal int "json:\"confidenceTotal\""; App string "json:\"app\""; Icon string "json:\"icon\""; Website string "json:\"website\""; Categories []struct { Name string "json:\"name\""; Priority int "json:\"priority\"" } "json:\"categories\"" }) {
        }
      }
    }
  },
  Task: (struct { Uuid string "json:\"uuid\""; Time time.Time "json:\"time\""; Url string "json:\"url\""; Visibility string "json:\"visibility\""; Method string "json:\"method\""; Source string "json:\"source\""; Tags []string "json:\"tags\""; ReportURL string "json:\"reportURL\""; ScreenshotURL string "json:\"screenshotURL\""; DomURL string "json:\"domURL\"" }) {
    Uuid: (string) (len=36) "663bc207-f1fd-4f41-b413-3cc99f1e31b8",
    Time: (time.Time) 2024-11-08 10:24:51.397 +0000 UTC,
    Url: (string) (len=32) "https://www.www.intern.savee.it/",
    Visibility: (string) (len=6) "public",
    Method: (string) (len=3) "api",
    Source: (string) (len=8) "2ffb2129",
    Tags: ([]string) {
    },
    ReportURL: (string) (len=63) "https://urlscan.io/result/663bc207-f1fd-4f41-b413-3cc99f1e31b8/",
    ScreenshotURL: (string) (len=71) "https://urlscan.io/screenshots/663bc207-f1fd-4f41-b413-3cc99f1e31b8.png",
    DomURL: (string) (len=60) "https://urlscan.io/dom/663bc207-f1fd-4f41-b413-3cc99f1e31b8/"
  },
  Page: (struct { Asn string "json:\"asn\""; Asnname string "json:\"asnname\""; City string "json:\"city\""; Country string "json:\"country\""; Domain string "json:\"domain\""; Ip string "json:\"ip\""; Ptr string "json:\"ptr\""; Url string "json:\"url\""; Redirected string "json:\"redirected\""; MimeType string "json:\"mimeType\""; Title string "json:\"title\""; TlsValidDays int "json:\"tlsValidDays\""; TlsAgeDays int "json:\"tlsAgeDays\""; TlsValidFrom time.Time "json:\"tlsValidFrom\""; UmbrellaRank int "json:\"umbrellaRank\""; ApexDomain string "json:\"apexDomain\""; TlsIssuer string "json:\"tlsIssuer\""; Status string "json:\"status\"" }) {
    Asn: (string) (len=7) "AS63949",
    Asnname: (string) (len=43) "AKAMAI-LINODE-AP Akamai Connected Cloud, SG",
    City: (string) (len=12) "Cedar Knolls",
    Country: (string) (len=2) "US",
    Domain: (string) (len=8) "savee.it",
    Ip: (string) (len=14) "104.200.31.245",
    Ptr: (string) (len=8) "savee.it",
    Url: (string) (len=31) "https://savee.it/www.www.intern",
    Redirected: (string) (len=10) "sub-domain",
    MimeType: (string) (len=9) "text/html",
    Title: (string) (len=33) "404: This page could not be found",
    TlsValidDays: (int) 89,
    TlsAgeDays: (int) 29,
    TlsValidFrom: (time.Time) 2024-10-09 13:08:28 +0000 UTC,
    UmbrellaRank: (int) 866761,
    ApexDomain: (string) (len=8) "savee.it",
    TlsIssuer: (string) (len=2) "E6",
    Status: (string) (len=3) "200"
  },
  Lists: (struct { Ips []string "json:\"ips\""; Countries []string "json:\"countries\""; Asns []string "json:\"asns\""; Domains []string "json:\"domains\""; Servers []string "json:\"servers\""; Urls []string "json:\"urls\""; LinkDomains []string "json:\"linkDomains\""; Certificates []struct { SubjectName string "json:\"subjectName\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\"" } "json:\"certificates\""; Hashes []string "json:\"hashes\"" }) {
    Ips: ([]string) (len=3) {
      (string) (len=14) "104.21.234.234",
      (string) (len=14) "169.150.247.39",
      (string) (len=14) "104.200.31.245"
    },
    Countries: ([]string) (len=2) {
      (string) (len=2) "DE",
      (string) (len=2) "US"
    },
    Asns: ([]string) (len=3) {
      (string) (len=5) "13335",
      (string) (len=5) "60068",
      (string) (len=5) "63949"
    },
    Domains: ([]string) (len=4) {
      (string) (len=16) "st.savee-cdn.com",
      (string) (len=8) "savee.it",
      (string) (len=7) "rsms.me",
      (string) (len=23) "www.www.intern.savee.it"
    },
    Servers: ([]string) (len=2) {
      (string) (len=17) "BunnyCDN-DE1-1082",
      (string) (len=10) "cloudflare"
    },
    Urls: ([]string) (len=21) {
      (string) (len=31) "https://savee.it/www.www.intern",
      (string) (len=32) "https://www.www.intern.savee.it/",
      (string) (len=32) "https://savee.it/www.www.intern/",
      (string) (len=62) "https://st.savee-cdn.com/_next/static/css/443b5a384b61da91.css",
      (string) (len=72) "https://st.savee-cdn.com/_next/static/chunks/webpack-656e6f1aaef23e6c.js",
      (string) (len=74) "https://st.savee-cdn.com/_next/static/chunks/framework-5ce6754f376fa5c3.js",
      (string) (len=69) "https://st.savee-cdn.com/_next/static/chunks/main-e4c13bc3b501e693.js",
      (string) (len=75) "https://st.savee-cdn.com/_next/static/chunks/pages/_app-1607120d08c80176.js",
      (string) (len=85) "https://st.savee-cdn.com/_next/static/chunks/pages/%5Busername%5D-1783b906860f46ea.js",
      (string) (len=77) "https://st.savee-cdn.com/_next/static/xJVVD0KMIekKYp2FCXeAn/_buildManifest.js",
      (string) (len=75) "https://st.savee-cdn.com/_next/static/xJVVD0KMIekKYp2FCXeAn/_ssgManifest.js",
      (string) (len=58) "https://rsms.me/inter/font-files/Inter-Regular.woff2?v=4.0",
      (string) (len=72) "https://savee.it/_monitoring/?o=4507387221573632&p=4507387225374720&r=us",
      (string) (len=71) "https://savee.it/_monitoring?o=4507387221573632&p=4507387225374720&r=us",
      (string) (len=29) "https://savee.it/js/script.js",
      (string) (len=29) "https://savee.it/api/graphql/",
      (string) (len=76) "https://st.savee-cdn.com/_next/static/chunks/pages/index-d847a348a7e2bf8d.js",
      (string) (len=75) "https://st.savee-cdn.com/_next/static/chunks/pages/join-f5b5e7499f4a6500.js",
      (string) (len=76) "https://st.savee-cdn.com/_next/static/chunks/pages/login-1fb778be10fdb784.js",
      (string) (len=51) "https://st.savee-cdn.com/favicons/favicon-32x32.png",
      (string) (len=33) "https://savee.it/proxy/api/event/"
    },
    LinkDomains: ([]string) {
    },
    Certificates: ([]struct { SubjectName string "json:\"subjectName\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\"" }) (len=3) {
      (struct { SubjectName string "json:\"subjectName\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\"" }) {
        SubjectName: (string) (len=8) "savee.it",
        Issuer: (string) (len=2) "E6",
        ValidFrom: (int) 1728479308,
        ValidTo: (int) 1736255307
      },
      (struct { SubjectName string "json:\"subjectName\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\"" }) {
        SubjectName: (string) (len=16) "st.savee-cdn.com",
        Issuer: (string) (len=3) "R11",
        ValidFrom: (int) 1727705429,
        ValidTo: (int) 1735481428
      },
      (struct { SubjectName string "json:\"subjectName\""; Issuer string "json:\"issuer\""; ValidFrom int "json:\"validFrom\""; ValidTo int "json:\"validTo\"" }) {
        SubjectName: (string) (len=7) "rsms.me",
        Issuer: (string) (len=3) "WE1",
        ValidFrom: (int) 1729333411,
        ValidTo: (int) 1737109410
      }
    },
    Hashes: ([]string) (len=19) {
      (string) (len=64) "4a36d537a3c4e9df901c13a333330a0453614a0f5826cab416b1d3c62e4c87a7",
      (string) (len=64) "f6677c53fb885a529bdcd9b2f2bf58a0d1a199d47c514e091ce4577badc236b7",
      (string) (len=64) "f355326c532427ca204611bfd11ca6ab79694d923502af319f189c321b386307",
      (string) (len=64) "aa859a23bdf26be92df1d288f4d40194d311b2ae4970e608c2a47b7e48056f14",
      (string) (len=64) "8962e2520ed976af2f6ae3adf5371c8be45ffcc59013efd84ba177a4ed6a233a",
      (string) (len=64) "90e37ea0a1a4fee4ecec9871fe8d997ef83b92e7129fd31d9506593c43b6bd9b",
      (string) (len=64) "a222682d9c7fb0a2dc543d2f6972997cf8ae93f3aa33a8d735da363516f65c38",
      (string) (len=64) "865a5c9db46c07ba7a318213200829ee64206fbb595650e25a89bd7f769088fd",
      (string) (len=64) "6f5b4aa00d2f8d6aed9935b471806bf7acef464d0c1d390260e5fe27f800c67e",
      (string) (len=64) "b6f9db9e45be20f3c1312c97fbee7ec36b7d8280f8caa4d53c9ba0408cc9997a",
      (string) (len=64) "44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8a",
      (string) (len=64) "e3409ac09af396e35fd67c5e024386d36c52138b7541e6a4644c31a94a2d33a4",
      (string) (len=64) "56a51cee0e40d339712586d11bce481b7ae6f5499fbbc4af4df4aff61f95df22",
      (string) (len=64) "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855",
      (string) (len=64) "4c9b30200072b8ab6df6334cf553b66bd8c5a3e14152f85651451cc8cb3bd192",
      (string) (len=64) "2689367b205c16ce32ed4200942b8b8b1e262dfc70d9bc9fbc77c49699a4f1df",
      (string) (len=64) "dc6cdaccaef54621cdbc9f0c738163c961da191c79000d8f383babc25f1be44e",
      (string) (len=64) "9dbef32d80fff94ba12533d9be98312d775ee9c7cace4a59ec8f3a1c814e325d",
      (string) (len=64) "c5585a7cda04d73cf504875748aae1f70055d38d4600c1b19de9c2418d93930e"
    }
  },
  Verdicts: (struct { Overall urlscanio.OverallVerdict "json:\"overall\""; Urlscan urlscanio.Verdict "json:\"urlscan\""; Engines urlscanio.EnginesVerdict "json:\"engines\""; Community urlscanio.CommunityVerdict "json:\"community\"" }) {
    Overall: (urlscanio.OverallVerdict) {
      Verdict: (urlscanio.Verdict) {
        Score: (int) 0,
        Categories: ([]string) {
        },
        Brands: ([]urlscanio.Brand) <nil>,
        Tags: ([]string) {
        },
        Malicious: (bool) false,
        HasVerdicts: (bool) false
      },
      Brands: ([]string) {
      }
    },
    Urlscan: (urlscanio.Verdict) {
      Score: (int) 0,
      Categories: ([]string) {
      },
      Brands: ([]urlscanio.Brand) {
      },
      Tags: ([]string) {
      },
      Malicious: (bool) false,
      HasVerdicts: (bool) false
    },
    Engines: (urlscanio.EnginesVerdict) {
      Verdict: (urlscanio.Verdict) {
        Score: (int) 0,
        Categories: ([]string) {
        },
        Brands: ([]urlscanio.Brand) <nil>,
        Tags: ([]string) <nil>,
        Malicious: (bool) false,
        HasVerdicts: (bool) false
      },
      EnginesTotal: (int) 0,
      MaliciousTotal: (int) 0,
      BenignTotal: (int) 0,
      MaliciousVerdicts: ([]interface {}) {
      },
      BenignVerdicts: ([]interface {}) {
      }
    },
    Community: (urlscanio.CommunityVerdict) {
      Verdict: (urlscanio.Verdict) {
        Score: (int) 0,
        Categories: ([]string) {
        },
        Brands: ([]urlscanio.Brand) {
        },
        Tags: ([]string) <nil>,
        Malicious: (bool) false,
        HasVerdicts: (bool) false
      },
      VotesTotal: (int) 0,
      VotesMalicious: (int) 0,
      VotesBenign: (int) 0
    }
  },
  Submitter: (struct { Country string "json:\"country\"" }) {
    Country: (string) (len=2) "US"
  }
}
